{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>"},{"location":"#introduction-to-shell","title":"Introduction to Shell","text":"<p>Command line interface (CLI) and graphic user interface (GUI) are different ways of interacting with a computer's operating system. They have different pros and cons. Most people are familiar with the GUI as it is the default interface for most software, particularly on Windows and Mac OS. When using the GUI, you see and interact with visual representations of files, folders, applications, and most other functions of your computer. When using the CLI, you work largely with text representations of software, files, folders, input and output. The shell is a program that allows you to control your computer by typing instructions on the CLI with a keyboard.</p> <p>There are several reasons to learn how to use the CLI:</p> <ul> <li>For most bioinformatics tools, there are no graphical interfaces. If you want to work in metagenomics or genomics, you're going to need to use the CLI/ shell.</li> <li>The shell gives you power. The command line allows you to work more efficiently. Tasks that are repetitive (e.g. renaming hundreds of files) can be automated. Tasks that are tedious (e.g. testing a range of input parameters) can be simplified.</li> <li>To use remote computers or cloud computing, you often need to use the shell.</li> </ul> Lesson Overview Pre . Unix, Linux and UNIX Shell Quick overview on UNIX operating system and it's importance 1. Introducing the shell Introduce <code>cd</code> <code>ls</code> 2. Navigating files and directories moving around the filesystem. Introduce absolute vs relative path 3. Working with files and directories View, search within, copy, move, and rename files. Create new directories 4. Redirection Employ the grep command to search for information within files 5. Writing scripts and working with data How to use a terminal based text editor 6. Project Organisation Create a file system for a bioinformatics project <p>Getting Started</p> <p>This lesson assumes no prior experience with the tools covered in the workshop. However, learners are expected to have some familiarity with biological concepts, including the concept of genomic variation within a population. Participants should bring their laptops and plan to participate actively.</p> <p>Attribution Notice</p> <ul> <li>This workshop material is adapted  and inspired by Data Carpentry - Shell Genomics</li> </ul> <p>License</p> <p>Genomics Aotearoa / New Zealand eScience Infrastructure \"Intermediate Shell for Bioinformatics\" is licensed under the GNU General Public License v3.0, 29 June 2007 . (Follow this link for more information)</p>"},{"location":"0-unixl-linux-overview/","title":"Overview : UNIX, Linux  &amp; UNIX Shell","text":"<p>Lesson Objectives</p> <ul> <li>Quick overview on UNIX operating system and it's importance</li> <li>Differences/similarities between UNIX vs. Linux</li> <li>What is a shell and the importance of UNIX shell/s for Bioinformatics (or for Scientific computing in general)</li> <li>Types of Shell and intro to Bash Shell (we will be using the latter throughout the workshop)</li> </ul> <p> </p>"},{"location":"0-unixl-linux-overview/#the-unix-operating-system","title":"The UNIX operating system","text":"<p>Unix is a multi-user operating system which allows more than one person to use the computer resources at a time. It was originally designed as a time-sharing system to serve several users simultaneously. Unix allows direct communication with the computer via a terminal, hence being very interactive and giving the user direct control over the computer resources. Unix also gives users the ability to share data and programs among one another.</p> <p>Unix is a generic operating system which takes full advantage of all available hardware such as 32-bit processor chips, expanded memory, and large, fast hard drives. Since Unix is written in a machine-independent language (C/C++) it is portable to many different types of machines including PC's. Therefore, Unix can be adapted to meet special requirements. The UNIX operating system is made up of three parts; the kernel, the shell and the programs.</p> <p>On Unix philosophy</p> <p>\u201cAlthough that philosophy can\u2019t be written down in a single sentence, as its heart is the idea that the power of a system comes more from the relationships among programs than from the programs themselves. Many UNIX programs do quite trivial things in isolation, but, combined with other programs, become general and useful tools.\u201d \u2013 Brian Kernighan &amp; Rob Pike</p> <p>The UNIX operating system is made up of three parts; the kernel, the shell and the programs</p> <p>Kernel \u2212 The kernel is the heart of the operating system. It interacts with the hardware and most of the tasks like memory management, task scheduling and file management.</p> <p>Shell \u2212 The shell is the utility that processes your requests (acts as an interface between the user and the kernel). When you type in a command at your terminal, the shell interprets (operating as in interpreter) the command and calls the program that you want. The shell uses standard syntax for all commands. The shell recognizes a limited set of commands, and you must give commands to the shell in a way that it understands: Each shell command consists of a command name, followed by command options (if any are desired) and command arguments (if any are desired). The command name, options, and arguments, are separated by blank space. </p> <ul> <li>An interpreter operates in a simple loop: It accepts a command, interprets the command, executes the command, and then waits for another command. The shell displays a \"prompt,\" to notify you that it is ready to accept your command.  </li> </ul>"},{"location":"0-unixl-linux-overview/#unix-vs-linux","title":"UNIX vs. Linux","text":"<p>Linux is not Unix, but it is a \"Unix-like\" operating system. Linux system is derived from Unix and it is a continuation of the basis of Unix design. Linux distributions are the most famous and healthiest example of the direct Unix derivatives. BSD (Berkley Software Distribution) is also an example of a Unix derivative.</p> Unix-like &amp; a bit more on Linux <p>A Unix-like OS (also called as UN*X or *nix) is the one that works in a way similar to Unix systems, however, it is not necessary that they conform to Single UNIX Specification (SUS) or similar POSIX (Portable Operating System Interface) standard.</p> <p>SUS is a standard which is required to be met for any OS (Operating System) to qualify for using \u2018UNIX\u2019 trademark. This trademark is granted by \u2018The Open Group\u2019</p> <p>Some examples of currently registered UNIX systems include macOS, Solaris, and AIX. If we consider the POSIX system, then Linux can be regarded as Unix-like OS.</p> <p>Linux is just the kernel and not the complete OS. This Linux kernel is generally packaged in Linux distributions which thereby makes it a complete OS.</p> <p>Linux distribution (also called a distro) is an operating system that is created from a collection of software built upon the Linux Kernel and is a package management system. A standard Linux distribution consists of a Linux kernel, GNU system, GNU utilities, libraries, compiler, additional software, documentation, a window system, window manager and a desktop environment. Most of the software included in a Linux distribution is free and open source. They may include some proprietary software like binary blobs which are essential for a few device drivers.</p>"},{"location":"0-unixl-linux-overview/#unix-shell-for-bioinformatics","title":"UNIX Shell for Bioinformatics","text":"<p>A shell is a computer program that presents a command line interface which allows you to control your computer using commands entered with a keyboard instead of controlling graphical user interfaces (GUIs) with a mouse/keyboard/touchscreen combination.</p> <p>There are many reasons to learn about the shell:</p> <ul> <li>Many bioinformatics tools can only be used through a command line interface. Many more have features and parameter options which are not available in the GUI. BLAST is an example. Many of the advanced functions are only accessible to users who know how to use a shell.</li> <li>The shell makes your work less boring. In bioinformatics you often need to repeat tasks with a large number of files. With the shell, you can automate those repetitive tasks and leave you free to do more exciting things.</li> <li>The shell makes your work less error-prone. When humans do the same thing a hundred different times (or even ten times), they\u2019re likely to make a mistake. Your computer can do the same thing a thousand times with no mistakes.</li> <li>The shell makes your work more reproducible. When you carry out your work in the command-line (rather than a GUI), your computer keeps a record of every step that you\u2019ve carried out which you can use to re-do your work when you need to. It also gives you a way to communicate unambiguously what you\u2019ve done, so that others can inspect or apply your process to new data.</li> <li>Many bioinformatic tasks require large amounts of computing power and can\u2019t realistically be run on your own machine. These tasks are best performed using remote computers or cloud computing, which can only be accessed through a shell.</li> </ul>"},{"location":"0-unixl-linux-overview/#different-types-of-shells","title":"Different Types of Shells","text":"<p>Being able to interact with the kernel makes shells a powerful tool. Without the ability to interact with the kernel, a user cannot access the utilities offered by their machine\u2019s operating system.</p> <p>Let\u2019s take a look at some of  the major shells that are available for the Linux environment</p> <p>Types of Shells</p> Bourne Shell (sh)C Shell (csh)Korn Shell (ksh)Z Shell (zsh)Fish Shell (fish) <p>Developed at AT&amp;T Bell Labs by Steve Bourne, the Bourne shell is regarded as the first UNIX shell ever. It is denoted as sh. It gained popularity due to its compact nature and high speeds of operation.</p> <p>The C shell was created at the University of California by Bill Joy. It is denoted as csh. It was developed to include useful programming features like in-built support for arithmetic operations and a syntax similar to the C programming language.</p> <p>Further, it incorporated command history which was missing in different types of shells in Linux like the Bourne shell. Another prominent feature of a C shell is \u201caliases\u201d.</p> <p>The complete path-name for the C shell is <code>/bin/csh</code>. By default, it uses the prompt <code>hostname#</code> for the root user and <code>hostname%</code> for the non-root users.</p> <p>The Korn shell was developed at AT&amp;T Bell Labs by David Korn, to improve the Bourne shell. It is denoted as ksh. The Korn shell is essentially a superset of the Bourne shell.</p> <p>Besides supporting everything that would be supported by the Bourne shell, it provides users with new functionalities. It allows in-built support for arithmetic operations while offering interactive features which are similar to the C shell.</p> <p>The Korn shell runs scripts made for the Bourne shell, while offering string, array and function manipulation similar to the C programming language. It also supports scripts which were written for the C shell. Further, it is faster than most different types of shells. </p> <p>zsh is a shell designed for interactive use, although it is also a powerful scripting language. Many of the useful features of bash, ksh, and tcsh were incorporated into zsh; many original features were added.</p> <p>Fish is a fully-equipped command line shell (like bash or zsh) that is smart and user-friendly. Fish supports powerful features like syntax highlighting, autosuggestions, and tab completions that just work, with nothing to learn or configure.</p> <p>If you want to make your command line more productive, more useful, and more fun, without learning a bunch of arcane syntax and configuration options, then fish might be just what you\u2019re looking for!</p>"},{"location":"0-unixl-linux-overview/#type-of-shell-for-this-workshop-gnu-bourne-again-shell-bash","title":"Type of Shell for this workshop: GNU Bourne-Again shell (bash)","text":"<p>The GNU Bourne-Again shell was designed to be compatible with the Bourne shell. It incorporates useful features from different types of shells in Linux such as Korn shell and C shell.</p> <ul> <li>The shell's name bash is an acronym for \"Bourne Again Shell\", a pun on the name of the Bourne shell that it replaces and the notion of being \"born again\"</li> </ul> <p>First released in 1989, it has been used as the default login shell for most Linux distributions. Bash was also the default shell in all versions of Apple macOS prior to the 2019 release of macOS Catalina, which changed the default shell to zsh, although Bash remains available as an alternative shell</p> <p>The Bash command syntax is a superset of the Bourne shell command syntax. Bash supports brace expansion, command line completion (Programmable Completion), basic debugging and signal handling (using <code>trap</code>) among other features. Bash can execute the vast majority of Bourne shell scripts without modification, with the exception of Bourne shell scripts stumbling into fringe syntax behavior interpreted differently in Bash or attempting to run a system command matching a newer Bash builtin, etc. </p>"},{"location":"01-introduction/","title":"1. First steps - Say Goodbye to the \ud83d\udc2d  ( mostly)","text":"<p>Lesson Objectives</p> <ul> <li>Navigate your file system using the command line.</li> <li>Access and read help files for <code>bash</code> programs and use help files to identify useful command options.</li> <li>Demonstrate the use of tab completion, and explain its advantages.</li> </ul> <p>questions</p> <ul> <li>What is a command shell and why would I use one?</li> <li>How can I move around on my computer?</li> <li>How can I see what files and directories I have?</li> <li>How can I specify the location of a file or directory on my computer?</li> </ul>"},{"location":"01-introduction/#how-to-access-the-shell","title":"How to access the shell","text":"<p>On a Mac or Linux machine, you can access a shell through a program called \"Terminal\", which is already available on your computer. The Terminal is a window into which we will type commands. If you're using Windows, you'll need to download a separate program to access the shell.</p> <p>To save time, we are going to be working on a remote server where all the necessary data and software available. When we say a 'remote server', we are talking about a computer that is not the one you are working on right now.</p>"},{"location":"01-introduction/#navigating-your-file-system","title":"Navigating your file system","text":"<p>The part of the operating system that manages files and directories is called the file system. It organizes our data into files, which hold information, and directories (also called \"folders\"), which hold files or other directories.</p> <p>Several commands are frequently used to create, inspect, rename, and delete files and directories.</p> <p>code</p> <pre><code>$\n</code></pre> <p>The dollar sign is a prompt, which shows us that the shell is waiting for input; your shell may use a different character as a prompt and may add information before the prompt. When typing commands, either from these lessons or from other sources, do not type the prompt, only the commands that follow it.</p> <p>Let's find out where we are by running a command called <code>pwd</code> (which stands for \"print working directory\"). At any moment, our current working directory is our current default directory, i.e., the directory that the computer assumes we want to run commands in, unless we explicitly specify something else. Here, the computer's response is <code>/home/&lt;username&gt;</code>, which is the top level directory within NeSI:</p> <p>code</p> <pre><code>$ pwd\n</code></pre> <pre><code>/home/&lt;username&gt;\n</code></pre> <p>Let's look at how our file system is organized. We can see what files and subdirectories are in this directory by running <code>ls</code>, which stands for \"listing\":</p> <p>code</p> <pre><code>$ ls\n</code></pre> <pre><code>shell_data\n</code></pre> <p><code>ls</code> prints the names of the files and directories in the current directory in alphabetical order, arranged neatly into columns. We'll be working within the <code>shell_data</code> subdirectory, and creating new subdirectories, throughout this workshop.</p> <p>The command to change locations in our file system is <code>cd</code>, followed by a directory name to change our working directory. <code>cd</code> stands for \"change directory\".</p> <p>Let's say we want to navigate to the <code>shell_data</code> directory we saw above. We can use the following command to get there:</p> <p>code</p> <pre><code>cd shell_data\n</code></pre> <p>and take a look</p> <pre><code>$ ls\n</code></pre> <pre><code>sra_metadata  untrimmed_fastq\n</code></pre> <p>We can make the <code>ls</code> output more comprehensible by using the flag <code>-F</code>, which tells <code>ls</code> to add a trailing <code>/</code> to the names of directories:</p> <p>code</p> <pre><code>$ ls -F\n</code></pre> <pre><code>sra_metadata/  untrimmed_fastq/\n</code></pre> <p>what is <code>/</code></p> <p>Anything with a <code>/</code> after it is a directory. Things with a \"*\" after them are programs. If there are no decorations, it's a file.</p> <p><code>ls</code> has lots of other options. To find out what they are, we can type:</p> <pre><code>$ man ls\n</code></pre> <p><code>man</code> (short for manual) displays detailed documentation (also referred as man page or man file) for <code>bash</code> commands. It is a powerful resource to explore <code>bash</code> commands, understand their usage and flags. Some manual files are very long. You can scroll through the file using your keyboard's down arrow or use the Space key to go forward one page and the b key to go backwards one page. When you are done reading, hit q to quit.</p> <p>Busy looking terminal ? time to \ud83c\udd91</p> <p>Type the word <code>clear</code> into the terminal and press the <code>Enter</code> key.</p> <p>code</p> <pre><code>$ clear\n</code></pre> <p>This will scroll your screen down to give you a fresh screen and will make it easier to read. You haven't lost any of the information on your screen. If you scroll up, you can see everything that has been output to your screen up until this point.</p> <p>Hot-key combinations are shortcuts for performing common commands.</p> <p>The hot-key combination for clearing the console is <code>Ctrl+L</code>. Feel free to try it and see for yourself.</p> <p>Challenge</p> <p>Use the <code>-l</code> option for the <code>ls</code> command to display more information for each item in the directory. What is one piece of additional information this long format gives you that you don't see with the bare <code>ls</code> command?</p> solution <pre><code>$ ls -l\n</code></pre> <pre><code>total 8\ndrwxr-x--- 2 training training 4096 Jul 30  2015 sra_metadata\ndrwxr-xr-x 2 training training 4096 Nov 15  2017 untrimmed_fastq\n</code></pre> <p>The additional information given includes the name of the owner of the file, when the file was last modified, and whether the current user has permission to read and write to the file.</p> <p>No one can possibly learn all of these arguments, that's what the manual page is for. You can (and should) refer to the manual page or other help files as needed.</p> <p>Let's go into the <code>untrimmed_fastq</code> directory and see what is in there.</p> <p>code</p> <pre><code>$ cd untrimmed_fastq\n$ ls -F\n</code></pre> <pre><code>SRR097977.fastq  SRR098026.fastq\n</code></pre> <p>This directory contains two files with <code>.fastq</code> extensions. FASTQ is a format for storing information about sequencing reads and their quality. We will be learning more about FASTQ files in a later lesson.</p>"},{"location":"01-introduction/#shortcut-tab-completion","title":"Shortcut: Tab Completion","text":"<p>Typing out file or directory names can waste a lot of time and it's easy to make typing mistakes. Instead we can use tab complete as a shortcut. When you start typing out the name of a directory or file, then hit the Tab key, the shell will try to fill in the rest of the directory or file name.</p> <p>Return to your home directory:</p> <p>code</p> <pre><code>$ cd\n</code></pre> <p>then enter:</p> <pre><code>$ cd she&lt;tab&gt;\n</code></pre> <p>The shell will fill in the rest of the directory name for <code>shell_data</code>.</p> <p>Now change directories to <code>untrimmed_fastq</code> in <code>shell_data</code></p> <p>code</p> <pre><code>$ cd shell_data\n$ cd untrimmed_fastq\n</code></pre> <p>Using tab complete can be very helpful. However, it will only autocomplete a file or directory name if you've typed enough characters to provide a unique identifier for the file or directory you are trying to access.</p> <p>For example, if we now try to list the files which names start with <code>SR</code> by using tab complete:</p> <p>code</p> <pre><code>$ ls SR&lt;tab&gt;\n</code></pre> <p>The shell auto-completes your command to <code>SRR09</code>, because all file names in the directory begin with this prefix. When you hit Tab again, the shell will list the possible choices.</p> <p>code</p> <pre><code>$ ls SRR09&lt;tab&gt;&lt;tab&gt;\n</code></pre> <pre><code>SRR097977.fastq  SRR098026.fastq\n</code></pre> <p>Tab completion can also fill in the names of programs, which can be useful if you remember the beginning of a program name.</p> <p>code</p> <pre><code>$ pw&lt;tab&gt;&lt;tab&gt;\n</code></pre> <pre><code>pwck      pwconv    pwd       pwdx      pwunconv\n</code></pre> <p>Displays the name of every program that starts with <code>pw</code>.</p> <p>Summary</p> <p>We now know how to move around our file system using the command line. This gives us an advantage over interacting with the file system through a GUI as it allows us to work on a remote server, carry out the same set of operations on a large number of files quickly, and opens up many opportunities for using bioinformatic software that is only available in command line versions.</p> <p>In the next few episodes, we'll be expanding on these skills and seeing how using the command line shell enables us to make our workflow more efficient and reproducible.</p> <ul> <li>The shell gives you the ability to work more efficiently by using keyboard commands rather than a GUI.</li> <li>Useful commands for navigating your file system include: <code>ls</code>, <code>pwd</code>, and <code>cd</code>.</li> <li>Most commands take options (flags) which begin with a <code>-</code>.</li> <li>Tab completion can reduce errors from mistyping and make work more efficient in the shell.</li> </ul>"},{"location":"02-the-filesystem/","title":"2. Navigating Files and Directories","text":"<p>Lesson objectives</p> <ul> <li>Use a single command to navigate multiple steps in your directory structure, including moving backwards (one level up).</li> <li>Perform operations on files in directories outside your working directory.</li> <li>Work with hidden directories and hidden files.</li> <li>Interconvert between absolute and relative paths.</li> <li>Employ navigational shortcuts to move around your file system.</li> </ul> <p>questions</p> <ul> <li>How can I perform operations on files outside of my working directory?</li> <li>What are some navigational shortcuts I can use to make my work more efficient?</li> </ul>"},{"location":"02-the-filesystem/#moving-around-the-file-system","title":"Moving around the file system","text":"<p>We've learned how to use <code>pwd</code> to find our current location within our file system. We've also learned how to use <code>cd</code> to change locations and <code>ls</code> to list the contents of a directory. Now we're going to learn some additional commands for moving around within our file system.</p> <p>Use the commands we've learned so far to navigate to the <code>shell_data/untrimmed_fastq</code> directory, if you're not already there.</p> <p>code</p> <pre><code>$ cd\n$ cd ~/shell_data\n$ cd untrimmed_fastq\n</code></pre> <p>What if we want to move back up and out of this directory and to our top level directory? Can we type <code>cd shell_data</code>? Try it and see what happens.</p> <pre><code>$ cd shell_data\n</code></pre> <pre><code>-bash: cd: shell_data: No such file or directory\n</code></pre> <p>Your computer looked for a directory or file called <code>shell_data</code> within the directory you were already in. It didn't know you wanted to look at a directory level above the one you were located in.</p> <p>We have a special command to tell the computer to move us back or up one directory level.</p> <pre><code>$ cd ..\n</code></pre> <p>Now we can use <code>pwd</code> to make sure that we are in the directory we intended to navigate to, and <code>ls</code> to check that the contents of the directory are correct.</p> <p>code</p> <pre><code>$ pwd\n</code></pre> <pre><code>/home/&lt;username&gt;//shell_data\n</code></pre> <pre><code>$ ls\n</code></pre> <pre><code>sra_metadata  untrimmed_fastq\n</code></pre> <p>From this output, we can see that <code>..</code> did indeed take us back one level in our file system.</p> <p>You can chain these together like so:</p> <pre><code>$ ls ../../\n</code></pre> <p>prints the contents of <code>/home/&lt;username&gt;/shell_data</code>.</p>"},{"location":"02-the-filesystem/#finding-hidden-directories","title":"Finding hidden directories","text":"<p>Let's find a hidden directory and list it's content</p> <p>First navigate to the <code>shell_data</code> directory. There is a hidden directory within this directory. Explore the options for <code>ls</code> to find out how to see hidden directories. List the contents of the directory and identify the name of the text file in that directory.</p> <p>Hint: hidden files and folders in Unix start with <code>.</code>, for example <code>.my_hidden_directory</code></p> Solution <p>First use the <code>man</code> command to look at the options for <code>ls</code>.</p> <pre><code>$ man ls\n</code></pre> <p>The <code>-a</code> option is short for <code>all</code> and says that it causes <code>ls</code> to \"not ignore entries starting with .\" This is the option we want.</p> <pre><code>$ ls -a\n</code></pre> <pre><code>.  ..  .hidden  sra_metadata  untrimmed_fastq\n</code></pre> <p>The name of the hidden directory is <code>.hidden</code>. We can navigate to that directory using <code>cd</code>.</p> <pre><code>$ cd .hidden\n</code></pre> <p>And then list the contents of the directory using <code>ls</code>.</p> <pre><code>$ ls\n</code></pre> <pre><code>youfoundit.txt\n</code></pre> <p>The name of the text file is <code>youfoundit.txt</code>.</p> <p>In most commands the flags can be combined together in no particular order to obtain the desired results/output.</p> <p>code</p> <pre><code>$ ls -Fa\n$ ls -laF\n</code></pre>"},{"location":"02-the-filesystem/#examining-the-contents-of-other-directories","title":"Examining the contents of other directories","text":"<p>By default, the <code>ls</code> commands lists the contents of the working directory (i.e. the directory you are in). You can always find the directory you are in using the <code>pwd</code> command. However, you can also give <code>ls</code> the names of other directories to view. Navigate to your home directory if you are not already there.</p> <p>code</p> <pre><code>$ cd\n</code></pre> <p>Then enter the command:</p> <pre><code>$ ls ~/shell_data\n</code></pre> <pre><code>sra_metadata  untrimmed_fastq\n</code></pre> <p>This will list the contents of the <code>shell_data</code> directory without you needing to navigate there.</p> <p>The <code>cd</code> command works in a similar way.</p> <p>Try entering:</p> <pre><code>$ cd\n$ cd ~/shell_data/untrimmed_fastq\n</code></pre> <p>This will take you to the <code>untrimmed_fastq</code> directory without having to go through the intermediate directory.</p> <p>Navigating practice</p> <p>Navigate to your home directory. From there, list the contents of the <code>untrimmed_fastq</code> directory.</p> Solution <pre><code>$ cd\n$ ls ~/shell_data/untrimmed_fastq/\n</code></pre> <pre><code>SRR097977.fastq  SRR098026.fastq\n</code></pre>"},{"location":"02-the-filesystem/#full-vs-relative-paths","title":"Full vs. Relative Paths","text":"<p>The <code>cd</code> command takes an argument which is a directory name. Directories can be specified using either a relative path or a full absolute path. The directories on the computer are arranged into a hierarchy. The full path tells you where a directory is in that hierarchy. Navigate to the home directory, then enter the <code>pwd</code> command.</p> <p>code</p> <pre><code>$ cd\n$ pwd\n</code></pre> <p>You will see:</p> <pre><code>/home/&lt;username&gt;\n</code></pre> <p>This is the full name of your home directory. This tells you that you are in a directory called <code>training</code>, which sits inside a directory called <code>home</code> which sits inside the very top directory in the hierarchy. The very top of the hierarchy is a directory called <code>/</code> which is usually referred to as the root directory. So, to summarize: <code>training</code> is a directory in <code>home</code> which is a directory in <code>/</code>. More on <code>root</code> and <code>home</code> in the next section.</p> <p>Now enter the following command:</p> <pre><code>$ cd /home/&lt;username&gt;/shell_data/.hidden\n</code></pre> <p>This jumps forward multiple levels to the <code>.hidden</code> directory. Now go back to the home directory.</p> <pre><code>$ cd\n</code></pre> <p>You can also navigate to the <code>.hidden</code> directory using:</p> <p>code</p> <pre><code>$ cd ~/shell_data/.hidden\n</code></pre> <p>These two commands have the same effect, they both take us to the <code>.hidden</code> directory. The first uses the absolute path, giving the full address from the home directory. The second uses a relative path, giving only the address from the working directory. A full path always starts with a <code>/</code>. A relative path does not.</p> <p>A relative path is like getting directions from someone on the street. They tell you to \"go right at the stop sign, and then turn left on Main Street\". That works great if you're standing there together, but not so well if you're trying to tell someone how to get there from another country. A full path is like GPS coordinates. It tells you exactly where something is no matter where you are right now.</p> <p>You can usually use either a full path or a relative path depending on what is most convenient. If we are in the home directory, it is more convenient to enter the full path. If we are in the working directory, it is more convenient to enter the relative path since it involves less typing.</p> <p>Over time, it will become easier for you to keep a mental note of the structure of the directories that you are using and how to quickly navigate amongst them.</p>"},{"location":"02-the-filesystem/#relative-path-resolution","title":"Relative path resolution","text":"<p>Using the filesystem diagram below, if <code>pwd</code> displays <code>/Users/thing</code>,\" what will <code>ls ../backup</code> display?</p> <ol> <li><code>../backup: No such file or directory</code></li> <li><code>2012-12-01 2013-01-08 2013-01-27</code></li> <li><code>2012-12-01/ 2013-01-08/ 2013-01-27/</code></li> <li><code>original pnas_final pnas_sub</code></li> </ol> <p></p> Solution <ol> <li>No: there is a directory <code>backup</code> in <code>/Users</code>.</li> <li>No: this is the content of <code>Users/thing/backup</code>,    but with <code>..</code> we asked for one level further up.</li> <li>No: see previous explanation.    Also, we did not specify <code>-F</code> to display <code>/</code> at the end of the directory names.</li> <li>Yes: <code>../backup</code> refers to <code>/Users/backup</code>.</li> </ol>"},{"location":"02-the-filesystem/#navigational-shortcuts","title":"Navigational Shortcuts","text":"<p>The root directory is the highest level directory in your file system and contains files that are important for your computer to perform its daily work. While you will be using the root (<code>/</code>) at the beginning of your absolute paths, it is important that you avoid working with data in these higher-level directories, as your commands can permanently alter files that the operating system needs to function. In many cases, trying to run commands in <code>root</code> directories will require special permissions which are not discussed here, so it's best to avoid them and work within your home directory. Dealing with the <code>home</code> directory is very common. The tilde character, <code>~</code>, is a shortcut for your home directory. In our case, the <code>root</code> directory is two levels above our <code>home</code> directory, so <code>cd</code> or <code>cd ~</code> will take you to <code>/home/&lt;username&gt;</code> and <code>cd /</code> will take you to <code>/</code>. Navigate to the <code>shell_data</code> directory:</p> <p>code</p> <pre><code>$ cd\n$ cd ~/shell_data\n</code></pre> <p>Then enter the command:</p> <pre><code>$ ls ~\n</code></pre> <pre><code>shell_data\n</code></pre> <p>This prints the contents of your home directory, without you needing to type the full path.</p> <p>The commands <code>cd</code>, and <code>cd ~</code> are very useful for quickly navigating back to your home directory. We will be using the <code>~</code> character in later lessons to specify our home directory.</p> <p>Summary</p> <ul> <li>The <code>/</code>, <code>~</code>, and <code>..</code> characters represent important navigational shortcuts.</li> <li>Hidden files and directories start with <code>.</code> and can be viewed using <code>ls -a</code>.</li> <li>Relative paths specify a location starting from the current location, while absolute paths specify a location from the root of the file system.</li> </ul>"},{"location":"03-working-with-files/","title":"3. Working with Files and Directories","text":"<p>Lesson objectives</p> <ul> <li>View, search within, copy, move, and rename files. Create new directories.</li> <li>Use wildcards (<code>*</code>) to perform operations on multiple files.</li> <li>Make a file read only.</li> <li>Use the <code>history</code> command to view and repeat recently used commands.</li> </ul> <p>questions</p> <ul> <li>How can I view and search file contents?</li> <li>How can I create, copy and delete files and directories?</li> <li>How can I control who has permission to modify a file?</li> <li>How can I repeat recently used commands?</li> </ul>"},{"location":"03-working-with-files/#working-with-files","title":"Working with Files","text":""},{"location":"03-working-with-files/#our-data-set-fastq-files","title":"Our data set: FASTQ files","text":"<p>Now that we know how to navigate around our directory structure, let's start working with our sequencing files. We did a sequencing experiment and have two results files, which are stored in our <code>untrimmed_fastq</code> directory.</p>"},{"location":"03-working-with-files/#wildcards","title":"Wildcards","text":"<p>Navigate to your <code>untrimmed_fastq</code> directory:</p> <pre><code>$ cd ~/shell_data/untrimmed_fastq\n</code></pre> <p>We are interested in looking at the FASTQ files in this directory. We can list all files with the .fastq extension using the command:</p> <pre><code>$ ls *.fastq\n</code></pre> <pre><code>SRR097977.fastq  SRR098026.fastq\n</code></pre> <p>The <code>*</code> character is a special type of character called a wildcard, which can be used to represent any number of any type of character. Thus, <code>*.fastq</code> matches every file that ends with <code>.fastq</code>.</p> <p>This command:</p> <p>code</p> <pre><code>$ ls *977.fastq\n</code></pre> <pre><code>SRR097977.fastq\n</code></pre> <p>lists only the file that ends with <code>977.fastq</code>.</p> <p>Lists every file in <code>/usr/bin</code> that ends with the characters <code>11</code></p> <pre><code>$ ls /usr/bin/*11\n</code></pre> <pre><code>/usr/bin/cpp-11  /usr/bin/gcc-ar-11      /usr/bin/gcov-11       /usr/bin/lto-dump-11              /usr/bin/x86_64-linux-gnu-gcc-11     /usr/bin/x86_64-linux-gnu-gcc-ranlib-11  /usr/bin/x86_64-linux-gnu-gcov-tool-11\n/usr/bin/g++-11  /usr/bin/gcc-nm-11      /usr/bin/gcov-dump-11  /usr/bin/x86_64-linux-gnu-cpp-11  /usr/bin/x86_64-linux-gnu-gcc-ar-11  /usr/bin/x86_64-linux-gnu-gcov-11        /usr/bin/x86_64-linux-gnu-lto-dump-11\n/usr/bin/gcc-11  /usr/bin/gcc-ranlib-11  /usr/bin/gcov-tool-11  /usr/bin/x86_64-linux-gnu-g++-11  /usr/bin/x86_64-linux-gnu-gcc-nm-11  /usr/bin/x86_64-linux-gnu-gcov-dump-11\n</code></pre> <p>Note that the output displays full paths to files, since each result starts with <code>/</code>.</p> <p>Exercise</p> <p>Do each of the following tasks from your current directory using a single <code>ls</code> command for each:</p> <ol> <li>List all of the files in <code>/usr/bin</code> that start with the letter 'c'.</li> <li>List all of the files in <code>/usr/bin</code> that contain the letter 'a'.</li> <li>List all of the files in <code>/usr/bin</code> that end with the letter 'o'.</li> </ol> <p>Bonus: List all of the files in <code>/usr/bin</code> that contain the letter 'a' or the  letter 'c'.</p> <p>Hint: The bonus question requires a Unix wildcard that we haven't talked about  yet. Try searching the internet for information about Unix wildcards to find  what you need to solve the bonus problem.</p> Solution <ol> <li><code>ls /usr/bin/c*</code></li> <li><code>ls /usr/bin/*a*</code></li> <li><code>ls /usr/bin/*o</code>    Bonus: <code>ls /usr/bin/*[ac]*</code></li> </ol> <p>Exercise</p> <p><code>echo</code> is a built-in shell command that writes its arguments, like a line of text to standard output. The <code>echo</code> command can also be used with pattern matching characters, such as wildcard characters. Here we will use the <code>echo</code> command to see how the wildcard character is interpreted by the shell.</p> <pre><code>$ echo *.fastq\n</code></pre> <pre><code>SRR097977.fastq SRR098026.fastq\n</code></pre> <p>The <code>*</code> is expanded to include any file that ends with <code>.fastq</code>. We can see that the output of <code>echo *.fastq</code> is the same as that of <code>ls *.fastq</code>.</p> <p>What would the output look like if the wildcard could not be matched? Compare the outputs of <code>echo *.missing</code> and <code>ls *.missing</code>.</p> Solution <pre><code>$ echo *.missing\n</code></pre> <pre><code>*.missing\n</code></pre> <pre><code>$ ls *.missing\n</code></pre> <pre><code>ls: cannot access '*.missing': No such file or directory\n</code></pre>"},{"location":"03-working-with-files/#command-history","title":"Command History","text":"<p>If you want to repeat a command that you've run recently, you can access previous commands using the up arrow on your keyboard to go back to the most recent command. Likewise, the down arrow takes you forward in the command history.</p> <p>A few more useful shortcuts:</p> <ul> <li>Ctrl+C will cancel the command you are writing, and give you a   fresh prompt.</li> <li>Ctrl+R will do a reverse-search through your command history. This   is very useful.</li> <li>Ctrl+L or the <code>clear</code> command will clear your screen.</li> </ul> <p>You can also review your recent commands with the <code>history</code> command, by entering:</p> <pre><code>$ history\n</code></pre> <p>to see a numbered list of recent commands. You can reuse one of these commands directly by referring to the number of that command.</p> <p>For example, if your history looked like this:</p> <pre><code>259  ls *\n260  ls /usr/bin/*.sh\n261  ls *R1*fastq\n</code></pre> <p>then you could repeat command #260 by entering:</p> <pre><code>$ !260\n</code></pre> <p>Type <code>!</code> (exclamation point) and then the number of the command from your history. You will be glad you learned this when you need to re-run very complicated commands. For more information on advanced usage of <code>history</code>, read section 9.3 of Bash manual.</p> <p>Exercise</p> <p>Find the line number in your history for the command that listed all the .sh files in <code>/usr/bin</code>. Rerun that command.</p> solution <p>First type <code>history</code>. Then use <code>!</code> followed by the line number to rerun that command.</p>"},{"location":"03-working-with-files/#examining-files","title":"Examining Files","text":"<p>We now know how to switch directories, run programs, and look at the contents of directories, but how do we look at the contents of files?</p> <p>One way to examine a file is to print out all of the contents using the program <code>cat</code>.</p> <p>Enter the following command from within the <code>untrimmed_fastq</code> directory:</p> <p>code</p> <pre><code>$ cat SRR098026.fastq\n</code></pre> <p>This will print out all of the contents of the <code>SRR098026.fastq</code> to the screen.</p> <p>Exercise</p> <ol> <li>Print out the contents of the <code>~/shell_data/untrimmed_fastq/SRR097977.fastq</code> file. What is the last line of the file?</li> <li>From your home directory, and without changing directories,    use one short command to print the contents of all of the files in    the <code>~/shell_data/untrimmed_fastq</code> directory.</li> </ol> Solution <ol> <li>The last line of the file is <code>C:CCC::CCCCCCCC&lt;8?6A:C28C&lt;608'&amp;&amp;&amp;,'$</code>.</li> <li><code>cat ~/shell_data/untrimmed_fastq/*</code></li> </ol> <p><code>cat</code> is a terrific program, but when the file is really big, it can be annoying to use. The program, <code>less</code>, is useful for this case. <code>less</code> opens the file as read only, and lets you navigate through it. The navigation commands are identical to the <code>man</code> program.</p> <p>Enter the following command:</p> <pre><code>$ less SRR097977.fastq\n</code></pre> <p>Some navigation commands in <code>less</code>:</p> key action Space to go forward b to go backward g to go to the beginning G to go to the end q to quit <p><code>less</code> also gives you a way of searching through files. Use the \"/\" key to begin a search. Enter the word you would like to search for and press <code>enter</code>. The screen will jump to the next location where that word is found.</p> <p>Shortcut: If you hit \"/\" then \"enter\", <code>less</code> will repeat the previous search. <code>less</code> searches from the current location and works its way forward. Scroll up a couple lines on your terminal to verify you are at the beginning of the file. Note, if you are at the end of the file and search for the sequence \"CAA\", <code>less</code> will not find it. You either need to go to the beginning of the file (by typing <code>g</code>) and search again using <code>/</code> or you can use <code>?</code> to search backwards in the same way you used <code>/</code> previously.</p> <p>For instance, let's search forward for the sequence <code>TTTTT</code> in our file. You can see that we go right to that sequence, what it looks like, and where it is in the file. If you continue to type <code>/</code> and hit return, you will move forward to the next instance of this sequence motif. If you instead type <code>?</code> and hit return, you will search backwards and move up the file to previous examples of this motif.</p> <p>Exercise</p> <p>What are the next three nucleotides (characters) after the first instance of the sequence quoted above?</p> Solution <p><code>CAC</code></p> <p>Remember, the <code>man</code> program actually uses <code>less</code> internally and therefore uses the same commands, so you can search documentation using \"/\" as well!</p> <p>There's another way that we can look at files, and in this case, just look at part of them. This can be particularly useful if we just want to see the beginning or end of the file, or see how it's formatted.</p> <p>The commands are <code>head</code> and <code>tail</code> and they let you look at the beginning and end of a file, respectively.</p> <p>code</p> <pre><code>$ head SRR098026.fastq\n</code></pre> <pre><code>@SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35\nNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNN\n+SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35\n!!!!!!!!!!!!!!!!#!!!!!!!!!!!!!!!!!!\n@SRR098026.2 HWUSI-EAS1599_1:2:1:0:312 length=35\nNNNNNNNNNNNNNNNNANNNNNNNNNNNNNNNNNN\n+SRR098026.2 HWUSI-EAS1599_1:2:1:0:312 length=35\n!!!!!!!!!!!!!!!!#!!!!!!!!!!!!!!!!!!\n@SRR098026.3 HWUSI-EAS1599_1:2:1:0:570 length=35\nNNNNNNNNNNNNNNNNANNNNNNNNNNNNNNNNNN\n</code></pre> <pre><code>$ tail SRR098026.fastq\n</code></pre> <pre><code>+SRR098026.247 HWUSI-EAS1599_1:2:1:2:1311 length=35\n#!##!#################!!!!!!!######\n@SRR098026.248 HWUSI-EAS1599_1:2:1:2:118 length=35\nGNTGNGGTCATCATACGCGCCCNNNNNNNGGCATG\n+SRR098026.248 HWUSI-EAS1599_1:2:1:2:118 length=35\nB!;?!A=5922:##########!!!!!!!######\n@SRR098026.249 HWUSI-EAS1599_1:2:1:2:1057 length=35\nCNCTNTATGCGTACGGCAGTGANNNNNNNGGAGAT\n+SRR098026.249 HWUSI-EAS1599_1:2:1:2:1057 length=35\nA!@B!BBB@ABAB#########!!!!!!!######\n</code></pre> <p>The <code>-n</code> option to either of these commands can be used to print the first or last <code>n</code> lines of a file.</p> <pre><code>$ head -n 1 SRR098026.fastq\n</code></pre> <pre><code>@SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35\n</code></pre> <pre><code>$ tail -n 1 SRR098026.fastq\n</code></pre> <pre><code>A!@B!BBB@ABAB#########!!!!!!!######\n</code></pre>"},{"location":"03-working-with-files/#details-on-the-fastq-format","title":"Details on the FASTQ format","text":"<p>Although it looks complicated (and it is), it's easy to understand the fastq format with a little decoding. Some rules about the format include...</p> Line Description 1 Always begins with '@' and then information about the read 2 The actual DNA sequence 3 Always begins with a '+' and sometimes the same info in line 1 4 Has a string of characters which represent the quality scores; must have same number of characters as line 2 <p>We can view the first complete read in one of the files in our dataset by using <code>head</code> to look at the first four lines.</p> <p>code</p> <pre><code>$ head -n 4 SRR098026.fastq\n</code></pre> <pre><code>@SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35\nNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNN\n+SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35\n!!!!!!!!!!!!!!!!#!!!!!!!!!!!!!!!!!!\n</code></pre> <p>All but one of the nucleotides in this read are unknown (<code>N</code>). This is a pretty bad read! Line 4 shows the quality for each nucleotide in the read. We'll cover the Fastq format more in depth tomorrow in when we look at assessing read quality in the DNA variant calling workshop.</p>"},{"location":"03-working-with-files/#creating-moving-copying-and-removing","title":"Creating, moving, copying, and removing","text":"<p>Now we can move around in the file structure, look at files, and search files. But what if we want to copy files or move them around or get rid of them? Most of the time, you can do these sorts of file manipulations without the command line, but there will be some cases (like when you're working with a remote computer like we are for this lesson) where it will be impossible. You'll also find that you may be working with hundreds of files and want to do similar manipulations to all of those files. In cases like this, it's much faster to do these operations at the command line.</p>"},{"location":"03-working-with-files/#copying-files","title":"Copying Files","text":"<p>When working with computational data, it's important to keep a safe copy of that data that can't be accidentally overwritten or deleted. For this lesson, our raw data is our FASTQ files. We don't want to accidentally change the original files, so we'll make a copy of them and change the file permissions so that we can read from, but not write to, the files.</p> <p>First, let's make a copy of one of our FASTQ files using the <code>cp</code> command.</p> <p>Navigate to the <code>~/shell_data/untrimmed_fastq</code> directory and enter:</p> <pre><code>$ cp SRR098026.fastq SRR098026-copy.fastq\n$ ls -F\n</code></pre> <pre><code>SRR097977.fastq  SRR098026-copy.fastq  SRR098026.fastq\n</code></pre> <p>We now have two copies of the <code>SRR098026.fastq</code> file, one of them named <code>SRR098026-copy.fastq</code>. We'll move this file to a new directory called <code>backup</code> where we'll store our backup data files.</p>"},{"location":"03-working-with-files/#creating-directories","title":"Creating Directories","text":"<p>The <code>mkdir</code> command is used to make a directory. Enter <code>mkdir</code> followed by a space, then the directory name you want to create:</p> <pre><code>$ mkdir backup\n</code></pre>"},{"location":"03-working-with-files/#moving-renaming","title":"Moving / Renaming","text":"<p>We can now move our backup file to this directory. We can move files around using the command <code>mv</code>:</p> <pre><code>$ mv SRR098026-copy.fastq backup\n$ ls backup\n</code></pre> <pre><code>SRR098026-copy.fastq\n</code></pre> <p>The <code>mv</code> command is also how you rename files. Let's rename this file to make it clear that this is a backup:</p> <pre><code>$ cd backup\n$ mv SRR098026-copy.fastq SRR098026-backup.fastq\n$ ls\n</code></pre> <pre><code>SRR098026-backup.fastq\n</code></pre>"},{"location":"03-working-with-files/#file-permissions","title":"File Permissions","text":"<p>We've now made a backup copy of our file, but just because we have two copies, it doesn't make us safe. We can still accidentally delete or overwrite both copies. To make sure we can't accidentally mess up this backup file, we're going to change the permissions on the file so that we're only allowed to read (i.e. view) the file, not write to it (i.e. make new changes).</p> <p>View the current permissions on a file using the <code>-l</code> (long) flag for the <code>ls</code> command:</p> <pre><code>$ ls -l\n</code></pre> <pre><code>-rw-r--r-- 1 training training 43332 Nov 15 23:02 SRR098026-backup.fastq\n</code></pre> <p>The first part of the output for the <code>-l</code> flag gives you information about the file's current permissions. There are ten slots in the permissions list. The first character in this list is related to file type, not permissions, so we'll ignore it for now. The next three characters relate to the permissions that the file owner has, the next three relate to the permissions for group members, and the final three characters specify what other users outside of your group can do with the file. We're going to concentrate on the three positions that deal with your permissions (as the file owner).</p> <p></p> <p>Here the three positions that relate to the file owner are <code>rw-</code>. The <code>r</code> means that you have permission to read the file, the <code>w</code> indicates that you have permission to write to (i.e. make changes to) the file, and the third position is a <code>-</code>, indicating that you don't have permission to carry out the ability encoded by that space (this is the space where <code>x</code> or executable ability is stored, we'll talk more about this in a later lesson).</p> <p>Our goal for now is to change permissions on this file so that you no longer have <code>w</code> or write permissions. We can do this using the <code>chmod</code> (change mode) command and subtracting (<code>-</code>) the write permission <code>-w</code>.</p> <p>code</p> <pre><code>$ chmod -w SRR098026-backup.fastq\n$ ls -l\n</code></pre> <pre><code>-r--r--r-- 1 training training 43332 Nov 15 23:02 SRR098026-backup.fastq\n</code></pre>"},{"location":"03-working-with-files/#removing","title":"Removing","text":"<p>To prove to ourselves that you no longer have the ability to modify this file, try deleting it with the <code>rm</code> command:</p> <p>code</p> <pre><code>$ rm SRR098026-backup.fastq\n</code></pre> <p>You'll be asked if you want to override your file permissions:</p> <pre><code>rm: remove write-protected regular file \u2018SRR098026-backup.fastq'?\n</code></pre> <p>You should enter <code>n</code> for no. If you enter <code>n</code> (for no), the file will not be deleted. If you enter <code>y</code>, you will delete the file. This gives us an extra measure of security, as there is one more step between us and deleting our data files.</p> <p>Important: The <code>rm</code> command permanently removes the file. Be careful with this command. It doesn't just nicely put the files in the Trash. They're really gone.</p> <p>By default, <code>rm</code> will not delete directories. You can tell <code>rm</code> to delete a directory using the <code>-r</code> (recursive) option. Let's delete the backup directory we just made.</p> <p>Enter the following command:</p> <pre><code>$ cd ..\n$ rm -r backup\n</code></pre> <p>This will delete not only the directory, but all files within the directory. If you have write-protected files in the directory, you will be asked whether you want to override your permission settings.</p> <p>Exercise</p> <p>Starting in the <code>~/shell_data/untrimmed_fastq/</code> directory, do the following:</p> <ol> <li>Make sure that you have deleted your backup directory and all files it contains.</li> <li>Create a backup of each of your FASTQ files using <code>cp</code>. (Note: You'll need to do this individually for each of the two FASTQ files. We haven't    learned yet how to do this    with a wildcard.)</li> <li>Use a wildcard to move all of your backup files to a new backup directory.</li> <li>Change the permissions on all of your backup files to be write-protected.</li> </ol> Solution <ol> <li><code>rm -r backup</code></li> <li><code>cp SRR098026.fastq SRR098026-backup.fastq</code> and <code>cp SRR097977.fastq SRR097977-backup.fastq</code></li> <li><code>mkdir backup</code> and <code>mv *-backup.fastq backup</code></li> <li><code>chmod -w backup/*-backup.fastq</code>    It's always a good idea to check your work with <code>ls -l backup</code>. You should see something like:</li> </ol> <pre><code>-r--r--r-- 1 training training 47552 Nov 15 23:06 SRR097977-backup.fastq\n-r--r--r-- 1 training training 43332 Nov 15 23:06 SRR098026-backup.fastq\n</code></pre> <p>keypoints</p> <ul> <li>You can view file contents using <code>less</code>, <code>cat</code>, <code>head</code> or <code>tail</code>.</li> <li>The commands <code>cp</code>, <code>mv</code>, and <code>mkdir</code> are useful for manipulating existing files and creating new directories.</li> <li>You can view file permissions using <code>ls -l</code> and change permissions using <code>chmod</code>.</li> <li>The <code>history</code> command and the up arrow on your keyboard can be used to repeat recently used commands.</li> </ul>"},{"location":"04-redirection/","title":"4. Redirection","text":"<p>Lesson Objectives</p> <ul> <li>Employ the <code>grep</code> command to search for information within files.</li> <li>Print the results of a command to a file.</li> <li>Construct command pipelines with two or more stages.</li> <li>Use <code>for</code> loops to run the same command for several input files.</li> </ul> <p>questions</p> <ul> <li>How can I search within files?</li> <li>How can I combine existing commands to do new things?</li> </ul>"},{"location":"04-redirection/#searching-files","title":"Searching files","text":"<p>We discussed in a previous episode how to search within a file using <code>less</code>. We can also search within files without even opening them, using <code>grep</code>. <code>grep</code> is a command-line utility for searching plain-text files for lines matching a specific set of characters (sometimes called a string) or a particular pattern (which can be specified using something called regular expressions). We're not going to work with regular expressions in this lesson, and are instead going to specify the strings we are searching for. Let's give it a try!</p>"},{"location":"04-redirection/#nucleotide-abbreviations","title":"Nucleotide abbreviations","text":"<p>The four nucleotides that appear in DNA are abbreviated <code>A</code>, <code>C</code>, <code>T</code> and <code>G</code>. Unknown nucleotides are represented with the letter <code>N</code>. An <code>N</code> appearing in a sequencing file represents a position where the sequencing machine was not able to confidently determine the nucleotide in that position. You can think of an <code>N</code> as being aNy nucleotide at that position in the DNA sequence.</p> <p>We'll search for strings inside of our fastq files. Let's first make sure we are in the correct directory:</p> <p>code</p> <pre><code>$ cd ~/shell_data/untrimmed_fastq\n</code></pre> <p>Suppose we want to see how many reads in our file have really bad segments containing 10 consecutive unknown nucleotides (Ns).</p>"},{"location":"04-redirection/#determining-quality","title":"Determining quality","text":"<p>In this lesson, we're going to be manually searching for strings of <code>N</code>s within our sequence results to illustrate some principles of file searching. It can be really useful to do this type of searching to get a feel for the quality of your sequencing results, however, in your research you will most likely use a bioinformatics tool that has a built-in program for filtering out low-quality reads. You'll learn how to use one such tool in a later lesson.</p> <p>Let's search for the string <code>NNNNNNNNNN</code> in the SRR098026 file:</p> <pre><code>$ grep NNNNNNNNNN SRR098026.fastq\n</code></pre> <p>This command returns a lot of output to the terminal. Every single line in the SRR098026 file that contains at least 10 consecutive <code>N</code>s is printed to the terminal, regardless of how long or short the file is. We may be interested not only in the actual sequence which contains this string, but in the name (or identifier) of that sequence. We discussed in a previous lesson that the identifier line immediately precedes the nucleotide sequence for each read in a FASTQ file. We may also want to inspect the quality scores associated with each of these reads. To get all of this information, we will return the line immediately before each match and the two lines immediately after each match.</p> <p>We can use the <code>-B</code> argument for grep to return a specific number of lines before each match. The <code>-A</code> argument returns a specific number of lines after each matching line. Here we want the line before and the two lines after each matching line, so we add <code>-B1 -A2</code> to our grep command:</p> <p>code</p> <pre><code>$ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq\n</code></pre> <p>One of the sets of lines returned by this command is:</p> <pre><code>@SRR098026.177 HWUSI-EAS1599_1:2:1:1:2025 length=35\nCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n+SRR098026.177 HWUSI-EAS1599_1:2:1:1:2025 length=35\n#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n</code></pre> Can we avoid typiing <code>N</code> 10 times as it is a bit tedious \ud83d\ude35\u200d\ud83d\udcab <p>Sure can. Use  <pre><code>grep -E -B1 -A2 \"N{10}\" SRR098026.fastq\n</code></pre></p> <ul> <li><code>-E</code>: This option tells grep to use Extended Regular Expressions (ERE). In ERE, certain characters like {}, (), ?, +, and | have special meanings without needing to be escaped. This is crucial for our pattern N{10} to work as intended.</li> <li><code>\"N{10}\":</code> This is the pattern we're searching for:<ul> <li><code>N</code> represents the literal character 'N'.</li> <li><code>{10}</code> is a quantifier that means \"exactly 10 times\".</li> <li>Together, <code>N{10}</code> matches exactly 10 consecutive 'N' characters.</li> </ul> </li> </ul> <p>Exercise</p> <ol> <li> <p>Search for the sequence <code>GNATNACCACTTCC</code> in the <code>SRR098026.fastq</code> file.    Have your search return all matching lines and the name (or identifier) for each sequence    that contains a match.</p> </li> <li> <p>Search for the sequence <code>AAGTT</code> in both FASTQ files.    Have your search return all matching lines and the name (or identifier) for each sequence    that contains a match</p> </li> </ol> Solution <ol> <li> <p><code>grep -B1 GNATNACCACTTCC SRR098026.fastq</code></p> <pre><code>@SRR098026.245 HWUSI-EAS1599_1:2:1:2:801 length=35\nGNATNACCACTTCCAGTGCTGANNNNNNNGGGATG\n</code></pre> </li> <li> <p><code>grep -B1 AAGTT *.fastq</code></p> <pre><code>SRR097977.fastq-@SRR097977.11 209DTAAXX_Lenski2_1_7:8:3:247:351 length=36\nSRR097977.fastq:GATTGCTTTAATGAAAAAGTCATATAAGTTGCCATG\n--\nSRR097977.fastq-@SRR097977.67 209DTAAXX_Lenski2_1_7:8:3:544:566 length=36\nSRR097977.fastq:TTGTCCACGCTTTTCTATGTAAAGTTTATTTGCTTT\n--\nSRR097977.fastq-@SRR097977.68 209DTAAXX_Lenski2_1_7:8:3:724:110 length=36\nSRR097977.fastq:TGAAGCCTGCTTTTTTATACTAAGTTTGCATTATAA\n--\nSRR097977.fastq-@SRR097977.80 209DTAAXX_Lenski2_1_7:8:3:258:281 length=36\nSRR097977.fastq:GTGGCGCTGCTGCATAAGTTGGGTTATCAGGTCGTT\n--\nSRR097977.fastq-@SRR097977.92 209DTAAXX_Lenski2_1_7:8:3:353:318 length=36\nSRR097977.fastq:GGCAAAATGGTCCTCCAGCCAGGCCAGAAGCAAGTT\n--\nSRR097977.fastq-@SRR097977.139 209DTAAXX_Lenski2_1_7:8:3:703:655 length=36\nSRR097977.fastq:TTTATTTGTAAAGTTTTGTTGAAATAAGGGTTGTAA\n--\nSRR097977.fastq-@SRR097977.238 209DTAAXX_Lenski2_1_7:8:3:592:919 length=36\nSRR097977.fastq:TTCTTACCATCCTGAAGTTTTTTCATCTTCCCTGAT\n--\nSRR098026.fastq-@SRR098026.158 HWUSI-EAS1599_1:2:1:1:1505 length=35\nSRR098026.fastq:GNNNNNNNNCAAAGTTGATCNNNNNNNNNTGTGCG\n</code></pre> </li> </ol>"},{"location":"04-redirection/#redirecting-output","title":"Redirecting output","text":"<p><code>grep</code> allowed us to identify sequences in our FASTQ files that match a particular pattern. All of these sequences were printed to our terminal screen, but in order to work with these sequences and perform other operations on them, we will need to capture that output in some way.</p> <p>We can do this with something called \"redirection\". The idea is that we are taking what would ordinarily be printed to the terminal screen and redirecting it to another location. In our case, we want to print this information to a file so that we can look at it later and use other commands to analyze this data.</p> <p>The command for redirecting output to a file is <code>&gt;</code>.</p> <p>Let's try out this command and copy all the records (including all four lines of each record) in our FASTQ files that contain 'NNNNNNNNNN' to another file called <code>bad_reads.txt</code>.</p> <p>Code</p> <pre><code>$ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq &gt; bad_reads.txt\n</code></pre> <ul> <li>You will notice the <code>NNNN..</code> characters aren't highlighted in red anymore. Perhaps <code>grep</code> might have a flag to retain the colour for searched pattern ?</li> </ul> <p>File extensions</p> <p>You might be confused about why we're naming our output file with a <code>.txt</code> extension. After all, it will be holding FASTQ formatted data that we're extracting from our FASTQ files. Won't it also be a FASTQ file? The answer is, yes - it will be a FASTQ file and it would make sense to name it with a <code>.fastq</code> extension. However, using a <code>.fastq</code> extension will lead us to problems when we move to using wildcards later in this episode. We'll point out where this becomes important. For now, it's good that you're thinking about file extensions!</p> <p>The prompt should sit there a little bit, and then it should look like nothing happened. But type <code>ls</code>. You should see a new file called <code>bad_reads.txt</code>.</p> <p>We can check the number of lines in our new file using a command called <code>wc</code>. <code>wc</code> stands for word count. This command counts the number of words, lines, and characters in a file. The FASTQ file may change over time, so given the potential for updates, make sure your file matches your instructor's output.</p> <p>As of Sept. 2020, wc gives the following output:</p> <pre><code>$ wc bad_reads.txt\n</code></pre> <pre><code>537  1073 23217  bad_reads.txt\n</code></pre> <p>This will tell us the number of lines, words and characters in the file. If we want only the number of lines, we can use the <code>-l</code> flag for <code>lines</code>.</p> <pre><code>$ wc -l bad_reads.txt\n</code></pre> <pre><code>537 bad_reads.txt\n</code></pre> <p>Exercise</p> <p>How many sequences are there in <code>SRR098026.fastq</code>? Remember that every sequence is formed by four lines.</p> Solution <pre><code>$ wc -l SRR098026.fastq\n</code></pre> <pre><code>996\n</code></pre> <p>Now you can divide this number by four to get the number of sequences in your fastq file.</p> <p>Exercise</p> <p>How many sequences in <code>SRR098026.fastq</code> contain at least 3 consecutive Ns?</p> Solution <pre><code>$ grep NNN SRR098026.fastq &gt; bad_reads.txt\n$ wc -l bad_reads.txt\n</code></pre> <pre><code>249\n</code></pre> <p>We might want to search multiple FASTQ files for sequences that match our search pattern. However, we need to be careful, because each time we use the <code>&gt;</code> command to redirect output to a file, the new output will replace the output that was already present in the file. This is called \"overwriting\" and, just like you don't want to overwrite your video recording of your kid's first birthday party, you also want to avoid overwriting your data files.</p> <p>code</p> <pre><code>$ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq &gt; bad_reads.txt\n$ wc -l bad_reads.txt\n</code></pre> <pre><code>537 bad_reads.txt\n</code></pre> <p>code</p> <pre><code>$ grep -B1 -A2 NNNNNNNNNN SRR097977.fastq &gt; bad_reads.txt\n$ wc -l bad_reads.txt\n</code></pre> <pre><code>0 bad_reads.txt\n</code></pre> <p>Here, the output of our second call to <code>wc</code> shows that we no longer have any lines in our <code>bad_reads.txt</code> file. This is because the second file we searched (<code>SRR097977.fastq</code>) does not contain any lines that match our search sequence. So our file was overwritten and is now empty.</p> <p>We can avoid overwriting our files by using the command <code>&gt;&gt;</code>. <code>&gt;&gt;</code> is known as the \"append redirect\" and will append new output to the end of a file, rather than overwriting it.</p> <pre><code>$ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq &gt; bad_reads.txt\n$ wc -l bad_reads.txt\n</code></pre> <pre><code>537 bad_reads.txt\n</code></pre> <pre><code>$ grep -B1 -A2 NNNNNNNNNN SRR097977.fastq &gt;&gt; bad_reads.txt\n$ wc -l bad_reads.txt\n</code></pre> <pre><code>537 bad_reads.txt\n</code></pre> <p>The output of our second call to <code>wc</code> shows that we have not overwritten our original data.</p> <p>We can also do this with a single line of code by using a wildcard:</p> <pre><code>$ grep -B1 -A2 NNNNNNNNNN *.fastq &gt; bad_reads.txt\n$ wc -l bad_reads.txt\n</code></pre> <pre><code>537 bad_reads.txt\n</code></pre> <p>File extensions - part 2</p> <p>This is where we would have trouble if we were naming our output file with a <code>.fastq</code> extension. If we already had a file called <code>bad_reads.fastq</code> (from our previous <code>grep</code> practice) and then ran the command above using a <code>.fastq</code> extension instead of a <code>.txt</code> extension, <code>grep</code> would give us a warning.</p> <p>Code</p> <pre><code>grep -B1 -A2 NNNNNNNNNN *.fastq &gt; bad_reads.fastq\n</code></pre> <pre><code>grep: input file \u2018bad_reads.fastq' is also the output\n</code></pre> <p><code>grep</code> is letting you know that the output file <code>bad_reads.fastq</code> is also included in your <code>grep</code> call because it matches the <code>*.fastq</code> pattern. Be careful with this as it can lead to some unintended results.</p> <p>Since we might have multiple different criteria we want to search for, creating a new output file each time has the potential to clutter up our workspace. We also thus far haven't been interested in the actual contents of those files, only in the number of reads that we've found. We created the files to store the reads and then counted the lines in the file to see how many reads matched our criteria. There's a way to do this, however, that doesn't require us to create these intermediate files - the pipe command (<code>|</code>).</p> <p>This is probably not a key on your keyboard you use very much, so let's all take a minute to find that key. In the UK and US keyboard layouts, and several others, the <code>|</code> character can be found using the key combination Shift+\\. This may be different for other language-specific layouts.</p> <p>What <code>|</code> does is take the output that is scrolling by on the terminal and uses that output as input to another command. When our output was scrolling by, we might have wished we could slow it down and look at it, like we can with <code>less</code>. Well it turns out that we can! We can redirect our output from our <code>grep</code> call through the <code>less</code> command.</p> <p>code</p> <pre><code>$ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq | less\n</code></pre> <p>We can now see the output from our <code>grep</code> call within the <code>less</code> interface. We can use the up and down arrows to scroll through the output and use <code>q</code> to exit <code>less</code>.</p> <p>If we don't want to create a file before counting lines of output from our <code>grep</code> search, we could directly pipe the output of the grep search to the command <code>wc -l</code>. This can be helpful for investigating your output if you are not sure you would like to save it to a file.</p> <p>Code</p> <pre><code>$ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq | wc -l\n</code></pre> <p>Because we asked <code>grep</code> for all four lines of each FASTQ record, we need to divide the output by four to get the number of sequences that match our search pattern. Since 802 / 4 = 200.5 and we are expecting an integer number of records, there is something added or missing in <code>bad_reads.txt</code>. If we explore <code>bad_reads.txt</code> using <code>less</code>, we might be able to notice what is causing the uneven number of lines. Luckily, this issue happens by the end of the file so we can also spot it with <code>tail</code>.</p> <p>code</p> <pre><code>$ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq &gt; bad_reads.txt\n$ tail bad_reads.txt\n</code></pre> <pre><code>@SRR098026.133 HWUSI-EAS1599_1:2:1:0:1978 length=35\nANNNNNNNNNTTCAGCGACTNNNNNNNNNNGTNGN\n+SRR098026.133 HWUSI-EAS1599_1:2:1:0:1978 length=35\n#!!!!!!!!!##########!!!!!!!!!!##!#!\n--\n--\n@SRR098026.177 HWUSI-EAS1599_1:2:1:1:2025 length=35\nCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n+SRR098026.177 HWUSI-EAS1599_1:2:1:1:2025 length=35\n#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n</code></pre> <p>The sixth line in the output display \"--\" which is the default action for <code>grep</code> to separate groups of lines matching the pattern, and indicate groups of lines which did not match the pattern so are not displayed. To fix this issue, we can redirect the output of grep to a second instance of <code>grep</code> as follows.</p> <p>code</p> <pre><code>$ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq | grep -v '^--' &gt; bad_reads.txt\n$ tail bad_reads.txt\n</code></pre> <pre><code>+SRR098026.132 HWUSI-EAS1599_1:2:1:0:320 length=35\n#!!!!!!!!!##########!!!!!!!!!!##!#!\n@SRR098026.133 HWUSI-EAS1599_1:2:1:0:1978 length=35\nANNNNNNNNNTTCAGCGACTNNNNNNNNNNGTNGN\n+SRR098026.133 HWUSI-EAS1599_1:2:1:0:1978 length=35\n#!!!!!!!!!##########!!!!!!!!!!##!#!\n@SRR098026.177 HWUSI-EAS1599_1:2:1:1:2025 length=35\nCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n+SRR098026.177 HWUSI-EAS1599_1:2:1:1:2025 length=35\n#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n</code></pre> <ul> <li><code>-v</code>: This option tells grep to invert the match, meaning it will return lines that do not match the specified pattern.</li> <li><code>'^--'</code>: This is a regular expression where: <code>^</code> asserts that the following characters (<code>--</code>) must be at the start of the line.</li> </ul> <p>Custom <code>grep</code> control</p> <p>Use <code>man grep</code> to read more about other options to customize the output of <code>grep</code> including extended options, anchoring characters, and much more.</p> <p>Redirecting output is often not intuitive, and can take some time to get used to. Once you're comfortable with redirection, however, you'll be able to combine any number of commands to do all sorts of exciting things with your data!</p> <p>None of the command line programs we've been learning do anything all that impressive on their own, but when you start chaining them together, you can do some really powerful things very efficiently.</p> <p>File manipulation and more practices with pipes</p> <p>To practice a bit more with the tools we've added to our tool kit so far and learn a few extra ones you can follow this extra lesson which uses the SRA metadata file.</p>"},{"location":"04-redirection/#writing-for-loops","title":"Writing for loops","text":"<p>Loops are key to productivity improvements through automation as they allow us to execute commands repeatedly. Similar to wildcards and tab completion, using loops also reduces the amount of typing (and typing mistakes). Loops are helpful when performing operations on groups of sequencing files, such as unzipping or trimming multiple files. We will use loops for these purposes in subsequent analyses, but will cover the basics of them for now.</p> <p>When the shell sees the keyword <code>for</code>, it knows to repeat a command (or group of commands) once for each item in a list. Each time the loop runs (called an iteration), an item in the list is assigned in sequence to the variable, and the commands inside the loop are executed, before moving on to the next item in the list. Inside the loop, we call for the variable's value by putting <code>$</code> in front of it. The <code>$</code> tells the shell interpreter to treat the variable as a variable name and substitute its value in its place, rather than treat it as text or an external command. In shell programming, this is usually called \"expanding\" the variable.</p> <p>Basic Structure of a <code>for</code> loop</p> <p>The basic structure of a bash for loop looks like this: <pre><code>for variable in list\ndo\n    commands\ndone\n</code></pre></p> <p>Let's break down each part:</p> <ol> <li><code>for</code>: This keyword starts the loop.</li> <li><code>variable</code>: This is a temporary variable that takes on each value in the list, one at a time.</li> <li><code>in</code>: This keyword separates the variable from the list.</li> <li><code>list</code>: This is the set of items you want to loop through.</li> <li><code>do</code>: This keyword marks the beginning of the commands to be executed in each iteration.</li> <li><code>commands</code>: These are the actions you want to perform for each item in the list.</li> <li><code>done</code>: This keyword marks the end of the loop.</li> </ol> <p>Here's a simple example to help you understand: <pre><code>for fruit in apple banana orange\ndo\n    echo \"I like $fruit\"\ndone\n</code></pre> This loop will output: <pre><code>I like apple\nI like banana\nI like orange\n</code></pre></p> <p>How does it work: </p> <ol> <li>The loop starts with \"apple\" as the value of fruit.</li> <li>It executes the echo command with this value.</li> <li>Then it moves to the next item, \"banana\", and repeats.</li> <li>Finally, it does the same with \"orange\".</li> </ol> <p>After the last item, the loop ends.</p> <p>Remember, you can put any commands inside the loop, and they will be executed for each item in your list. This makes for loops a powerful tool for automating repetitive tasks in bash scripting.</p> <p>Let's write a for loop to show us the first two lines of the fastq files we downloaded earlier. You will notice the shell prompt changes from <code>$</code> to <code>&gt;</code> and back again as we were typing in our loop. The second prompt, <code>&gt;</code>, is different to remind us that we haven't finished typing a complete command yet.</p> <pre><code>$ cd ../untrimmed_fastq/\n</code></pre> <pre><code>$ for filename in *.fastq\n&gt; do\n&gt; head -n 2 ${filename}\n&gt; done\n</code></pre> <p>The for loop begins with the formula <code>for &lt;variable&gt; in &lt;group to iterate over&gt;</code>. In this case, the word <code>filename</code> is designated as the variable to be used over each iteration. In our case <code>SRR097977.fastq</code> and <code>SRR098026.fastq</code> will be substituted for <code>filename</code> because they fit the pattern of ending with .fastq in the directory we've specified. The next line of the for loop is <code>do</code>. The next line is the code that we want to execute. We are telling the loop to print the first two lines of each variable we iterate over. Finally, the word <code>done</code> ends the loop.</p> <p>After executing the loop, you should see the first two lines of both fastq files printed to the terminal. Let's create a loop that will save this information to a file.</p> <pre><code>$ for filename in *.fastq\n&gt; do\n&gt; head -n 2 ${filename} &gt;&gt; seq_info.txt\n&gt; done\n</code></pre> <p>When writing a loop, you will not be able to return to previous lines once you have pressed Enter. Remember that we can cancel the current command using</p> <ul> <li>Ctrl+C</li> </ul> <p>If you notice a mistake that is going to prevent your loop for executing correctly.</p> <p>Note that we are using <code>&gt;&gt;</code> to append the text to our <code>seq_info.txt</code> file. If we used <code>&gt;</code>, the <code>seq_info.txt</code> file would be rewritten every time the loop iterates, so it would only have text from the last variable used. Instead, <code>&gt;&gt;</code> adds to the end of the file.</p>"},{"location":"04-redirection/#using-basename-in-for-loops","title":"Using Basename in for loops","text":"<p>Basename is a function in UNIX that is helpful for removing a uniform part of a name from a list of files. In this case, we will use basename to remove the <code>.fastq</code> extension from the files that we've been working with.</p> <p>code</p> <pre><code>$ basename SRR097977.fastq .fastq\n</code></pre> <p>We see that this returns just the SRR accession, and no longer has the .fastq file extension on it.</p> <pre><code>SRR097977\n</code></pre> <p>If we try the same thing but use <code>.fasta</code> as the file extension instead, nothing happens. This is because basename only works when it exactly matches a string in the file.</p> <p>Cdoe</p> <pre><code>$ basename SRR097977.fastq .fasta\n</code></pre> <pre><code>SRR097977.fastq\n</code></pre> <p>Basename is really powerful when used in a for loop. It allows to access just the file prefix, which you can use to name things. Let's try this.</p> <p>Inside our for loop, we create a new name variable. We call the basename function inside the parenthesis, then give our variable name from the for loop, in this case <code>${filename}</code>, and finally state that <code>.fastq</code> should be removed from the file name. It's important to note that we're not changing the actual files, we're creating a new variable called name. The line &gt; echo $name will print to the terminal the variable name each time the for loop runs. Because we are iterating over two files, we expect to see two lines of output.</p> <p>code</p> <pre><code>$ for filename in *.fastq\n&gt; do\n&gt; name=$(basename ${filename} .fastq)\n&gt; echo ${name}\n&gt; done\n</code></pre> <p>Why Parentheses <code>()</code> ?</p> <ul> <li>Command Substitution: The <code>$(...)</code> syntax is used for command substitution. It allows you to execute a command and use its output as a value in your script. In this case, <code>$(basename ${filename} .fastq)</code> executes the <code>basename</code> command and captures its output, which is then assigned to the variable name.</li> <li>Clarity: Using <code>$(...)</code> is preferred over backticks (<code>...</code>) for command substitution because it is more readable and can be nested more easily.</li> </ul> <p>Why Curly Braces <code>{}</code> ?</p> <ul> <li>Variable Expansion: The <code>${filename}</code> syntax is used to clearly indicate that you are referencing the variable <code>filename</code>. This is particularly useful in cases where the variable name might be adjacent to other characters that could be interpreted as part of the variable name.</li> <li>Disambiguation: For example, if you had a variable named <code>filename_suffix</code>, writing <code>$filename_suffix</code> could lead to ,especially if you are trying to concatenate or manipulate it with other strings. Using <code>${filename}</code> makes it clear where the variable name ends.</li> <li>Consistency: While not always required, using curly braces for variable expansion is a common practice that enhances readability and reduces the risk of errors.</li> </ul> <p>\ud83d\ude4b : In  <code>name=$(basename ${filename} .fastq)</code>, Can  I switch <code>{}</code> and <code>()</code> as in <code>name=${basename $(filename) .fastq}</code> ? \ud83d\udeab</p> <ul> <li>Order Matters: You must use <code>()</code> for command substitution first, and within that, you can use <code>{}</code> for variable expansion as needed.</li> <li>Contextual Importance: Always use <code>$(...)</code> for command substitution and <code>${...}</code> for variable expansion to ensure clarity and correctness in your scripts.</li> </ul> <p>In summary, while the two types of brackets serve different purposes, their correct order and usage are crucial for the intended functionality of your shell scripts.</p> <p>Exercise</p> <p>Print the file prefix of all of the <code>.txt</code> files in our current directory.</p> Solution <pre><code>$ for filename in *.txt\n&gt; do\n&gt; name=$(basename ${filename} .txt)\n&gt; echo ${name}\n&gt; done\n</code></pre> <p>One way this is really useful is to move files. Let's rename all of our .txt files using <code>mv</code> so that they have the years on them, which will document when we created them.</p> <pre><code>$ for filename in *.txt\n&gt; do\n&gt; name=$(basename ${filename} .txt)\n&gt; mv ${filename}  ${name}_2019.txt\n&gt; done\n</code></pre> <ul> <li><code>mv ${filename} ${name}_2019.txt:</code>This line renames the file. <ul> <li><code>${filename}</code> is the original file name.</li> <li><code>${name}_2019.txt</code> is the new file name, which consists of the original name (without .txt), followed by \"_2019.txt\".</li> </ul> </li> </ul> <p>Exercise</p> <p>Remove <code>_2019</code> from all of the <code>.txt</code> files.</p> Solution <pre><code>$ for filename in *_2019.txt\n&gt; do\n&gt; name=$(basename ${filename} _2019.txt)\n&gt; mv ${filename} ${name}.txt\n&gt; done\n</code></pre> <p>keypoints</p> <ul> <li><code>grep</code> is a powerful search tool with many options for customization.</li> <li><code>&gt;</code>, <code>&gt;&gt;</code>, and <code>|</code> are different ways of redirecting output.</li> <li><code>command &gt; file</code> redirects a command's output to a file.</li> <li><code>command &gt;&gt; file</code> redirects a command's output to a file without overwriting the existing contents of the file.</li> <li><code>command_1 | command_2</code> redirects the output of the first command as input to the second command.</li> <li><code>for</code> loops are used for iteration.</li> <li><code>basename</code> gets rid of repetitive parts of names.</li> </ul>"},{"location":"05-writing-scripts/","title":"5. Writing Scripts and Working with Data","text":"<p>Lesson objectives</p> <ul> <li>Use the <code>nano</code> text editor to modify text files.</li> <li>Write a basic shell script.</li> <li>Use the <code>bash</code> command to execute a shell script.</li> <li>Use <code>chmod</code> to make a script an executable program.</li> </ul> <p>questions</p> <ul> <li>How can we automate a commonly used set of commands?</li> </ul>"},{"location":"05-writing-scripts/#writing-files","title":"Writing files","text":"<p>We've been able to do a lot of work with files that already exist, but what if we want to write our own files? We're not going to type in a FASTA file, but we'll see as we go through other tutorials, there are a lot of reasons we'll want to write a file, or edit an existing file.</p> <p>To add text to files, we're going to use a text editor called Nano. We're going to create a file to take notes about what we've been doing with the data files in <code>~/shell_data/untrimmed_fastq</code>.</p> <p>This is good practice when working in bioinformatics. We can create a file called <code>README.txt</code> that describes the data files in the directory or documents how the files in that directory were generated. As the name suggests, it's a file that we or others should read to understand the information in that directory.</p> <p>Let's change our working directory to <code>~/shell_data/untrimmed_fastq</code> using <code>cd</code>, then run <code>nano</code> to create a file called <code>README.txt</code>:</p> <p>code</p> <pre><code>$ cd ~/shell_data/untrimmed_fastq\n$ nano README.txt\n</code></pre> <p>You should see something like this:</p> <p></p> <p>The text at the bottom of the screen shows the keyboard shortcuts for performing various tasks in <code>nano</code>. We will talk more about how to interpret this information soon.</p> <p>Which Editor?</p> <p>When we say, \"<code>nano</code> is a text editor,\" we really do mean \"text\": <code>nano</code> can only work with plain character data, not tables, images, or any other human-friendly media. We use <code>nano</code> in examples because it is one of the least complex text editors. However, because of this trait, <code>nano</code> may not be powerful enough or flexible enough for the work you need to do after this workshop. On Unix systems (such as Linux and Mac OS X), many programmers use Emacs or Vim (both of which require more time to learn), or a graphical editor such as Gedit. On Windows, you may wish to use Notepad++. Windows also has a built-in editor called <code>notepad</code> that can be run from the command line in the same way as <code>nano</code> for the purposes of this lesson.</p> <p>No matter what editor you use, you will need to know the default location where it searches for files and where files are saved. If you start an editor from the shell, it will (probably) use your current working directory as its default location. If you use your computer's start menu, the editor may want to save files in your desktop or documents directory instead. You can change this by navigating to another directory the first time you \"Save As...\"</p> <p>Let's type in a few lines of text. Describe what the files in this directory are or what you've been doing with them. Once we're happy with our text, we can press Ctrl-O (press the Ctrl or Control key and, while holding it down, press the O key) to write our data to disk. You'll be asked what file we want to save this to: press Return to accept the suggested default of <code>README.txt</code>.</p> <p>Once our file is saved, we can use Ctrl-X to quit the <code>nano</code> editor and return to the shell.</p> <p>Control, Ctrl, or ^ Key</p> <p>The Control key is also called the \"Ctrl\" key. There are various ways in which using the Control key may be described. For example, you may see an instruction to press the Ctrl key and, while holding it down, press the X key, described as any of:</p> <ul> <li><code>Control-X</code></li> <li><code>Control+X</code></li> <li><code>Ctrl-X</code></li> <li><code>Ctrl+X</code></li> <li><code>^X</code></li> <li><code>C-x</code></li> </ul> <p>In <code>nano</code>, along the bottom of the screen you'll see <code>^G Get Help ^O WriteOut</code>. This means that you can use Ctrl-G to get help and Ctrl-O to save your file.</p> <p>Now you've written a file. You can take a look at it with <code>less</code> or <code>cat</code>, or open it up again and edit it with <code>nano</code>.</p> <p>Exercise</p> <p>Open <code>README.txt</code> and add the date to the top of the file and save the file.</p> Solution <p>Use <code>nano README.txt</code> to open the file. Add today's date and then use Ctrl-X followed by <code>y</code> and Enter to save.</p>"},{"location":"05-writing-scripts/#writing-scripts","title":"Writing scripts","text":"<p>A really powerful thing about the command line is that you can write scripts. Scripts let you save commands to run them and also lets you put multiple commands together. Though writing scripts may require an additional time investment initially, this can save you time as you run them repeatedly. Scripts can also address the challenge of reproducibility: if you need to repeat an analysis, you retain a record of your command history within the script.</p> <p>One thing we will commonly want to do with sequencing results is pull out bad reads and write them to a file to see if we can figure out what's going on with them. We're going to look for reads with long sequences of N's like we did before, but now we're going to write a script, so we can run it each time we get new sequences, rather than type the code in by hand each time.</p> <p>We're going to create a new file to put this command in. We'll call it <code>bad-reads-script.sh</code>. The <code>sh</code> isn't required, but using that extension tells us that it's a shell script.</p> <p>code</p> <pre><code>$ nano bad-reads-script.sh\n</code></pre> <p>Bad reads have a lot of N's, so we're going to look for <code>NNNNNNNNNN</code> with <code>grep</code>. We want the whole FASTQ record, so we're also going to get the one line above the sequence and the two lines below. We also want to look in all the files that end with <code>.fastq</code>, so we're going to use the <code>*</code> wildcard.</p> <p>code</p> <pre><code>grep -B1 -A2 -h NNNNNNNNNN *.fastq | grep -v '^--' &gt; scripted_bad_reads.txt\n</code></pre> <p>Custom <code>grep</code> control</p> <p>We introduced the <code>-v</code> option in the previous episode, now we are using <code>-h</code> to \"Suppress the prefixing of file names on output\" according to the documentation shown by <code>man grep</code>.</p> <p>Type your <code>grep</code> command into the file and save it as before. Be careful that you did not add the <code>$</code> at the beginning of the line.</p> <p>Now comes the neat part. We can run this script. Type:</p> <p>Code</p> <pre><code>$ bash bad-reads-script.sh\n</code></pre> <p>It will look like nothing happened, but now if you look at <code>scripted_bad_reads.txt</code>, you can see that there are now reads in the file.</p> <p>Exercise</p> <p>We want the script to tell us when it's done.</p> <ol> <li>Open <code>bad-reads-script.sh</code> and add the line <code>echo \"Script finished!\"</code> after the <code>grep</code> command and save the file.</li> <li>Run the updated script.</li> </ol> Solution <pre><code>$ bash bad-reads-script.sh\nScript finished!\n</code></pre>"},{"location":"05-writing-scripts/#making-the-script-into-a-program","title":"Making the script into a program","text":"<p>We had to type <code>bash</code> because we needed to tell the computer what program to use to run this script. Instead, we can turn this script into its own program. We need to tell the computer that this script is a program by making the script file executable. We can do this by changing the file permissions. We talked about permissions in an earlier episode.</p> <p>First, let's look at the current permissions.</p> <pre><code>$ ls -l bad-reads-script.sh\n</code></pre> <pre><code>-rw-rw-r-- 1 dcuser dcuser 0 Oct 25 21:46 bad-reads-script.sh\n</code></pre> <p>We see that it says <code>-rw-r--r--</code>. This shows that the file can be read by any user and written to by the file owner (you). We want to change these permissions so that the file can be executed as a program. We use the command <code>chmod</code> like we did earlier when we removed write permissions. Here we are adding (<code>+</code>) executable permissions (<code>+x</code>).</p> <p>code</p> <pre><code>$ chmod +x bad-reads-script.sh\n</code></pre> <p>Now let's look at the permissions again.</p> <pre><code>$ ls -l bad-reads-script.sh\n</code></pre> <pre><code>-rwxrwxr-x 1 dcuser dcuser 0 Oct 25 21:46 bad-reads-script.sh\n</code></pre> <p>Now we see that it says <code>-rwxr-xr-x</code>. The <code>x</code>'s that are there now tell us we can run it as a program. So, let's try it! We'll need to put <code>./</code> at the beginning so the computer knows to look here in this directory for the program.</p> <p>code</p> <pre><code>$ ./bad-reads-script.sh\n</code></pre> <p>The script should run the same way as before, but now we've created our very own computer program!</p> <p>You will learn more about writing scripts in a later lesson.</p>"},{"location":"05-writing-scripts/#moving-and-downloading-data","title":"Moving and Downloading Data","text":"<p>So far, we've worked with data that is pre-loaded on the instance in the cloud. Usually, however, most analyses begin with moving data onto the instance. Below we'll show you some commands to download data onto your instance, or to move data between your computer and the cloud.</p> <p>Getting data from the cloud</p> <p>There are two programs that will download data from a remote server to your local (or remote) machine: <code>wget</code> and <code>curl</code>. They were designed to do slightly different tasks by default, so you'll need to give the programs somewhat different options to get the same behaviour, but they are mostly interchangeable.</p> <ul> <li> <p><code>wget</code> is short for \"world wide web get\", and it's basic function is to download   web pages or data at a web address.</p> </li> <li> <p><code>cURL</code> is a pun, it is supposed to be read as \"see URL\", so its basic function is   to display webpages or data at a web address.</p> </li> </ul> <p>Which one you need to use mostly depends on your operating system, as most computers will only have one or the other installed by default.</p> <p>Let's say you want to download some data from Ensembl. We're going to download a very small tab-delimited file that just tells us what data is available on the Ensembl bacteria server. Before we can start our download, we need to know whether we're using <code>curl</code> or <code>wget</code>.</p> <p>To see which program you have, type:</p> <pre><code>$ which curl\n$ which wget\n</code></pre> <p><code>which</code> is a BASH program that looks through everything you have installed, and tells you what folder it is installed to. If it can't find the program you asked for, it returns nothing, i.e. gives you no results.</p> <p>On Mac OSX, you'll likely get the following output:</p> <pre><code>$ which curl\n</code></pre> <pre><code>/usr/bin/curl\n</code></pre> <pre><code>$ which wget\n</code></pre> <pre><code>$\n</code></pre> <p>This output means that you have <code>curl</code> installed, but not <code>wget</code>.</p> <p>Once you know whether you have <code>curl</code> or <code>wget</code>, use one of the following commands to download the file:</p> <pre><code>$ cd\n$ wget ftp://ftp.ensemblgenomes.org/pub/release-37/bacteria/species_EnsemblBacteria.txt\n</code></pre> <p>or</p> <pre><code>$ cd\n$ curl -O ftp://ftp.ensemblgenomes.org/pub/release-37/bacteria/species_EnsemblBacteria.txt\n</code></pre> <p>Since we wanted to download the file rather than just view it, we used <code>wget</code> without any modifiers. With <code>curl</code> however, we had to use the -O flag, which simultaneously tells <code>curl</code> to download the page instead of showing it to us and specifies that it should save the file using the same name it had on the server: species_EnsemblBacteria.txt</p> <p>It's important to note that both <code>curl</code> and <code>wget</code> download to the computer that the command line belongs to. So, if you are logged into AWS on the command line and execute the <code>curl</code> command above in the AWS terminal, the file will be downloaded to your AWS machine, not your local one.</p> <p>keypoints</p> <ul> <li>Scripts are a collection of commands executed together.</li> <li>Transferring information to and from virtual and local computers.</li> </ul>"},{"location":"06-organization/","title":"6. Project Organization","text":"<p>Lesson objectives</p> <ul> <li>Create a file system for a bioinformatics project.</li> <li>Explain what types of files should go in your <code>docs</code>, <code>data</code>, and <code>results</code> directories.</li> <li>Use the <code>history</code> command and a text editor like <code>nano</code> to document your work on your project.</li> </ul> <p>questions</p> <ul> <li>How can I organize my file system for a new bioinformatics project?</li> <li>How can I document my work?</li> </ul>"},{"location":"06-organization/#getting-your-project-started","title":"Getting your project started","text":"<p>Project organization is one of the most important parts of a sequencing project, and yet is often overlooked amidst the excitement of getting a first look at new data. Of course, while it's best to get yourself organized before you even begin your analyses, it's never too late to start, either.</p> <p>You should approach your sequencing project similarly to how you do a biological experiment and this ideally begins with experimental design. We're going to assume that you've already designed a beautiful sequencing experiment to address your biological question, collected appropriate samples, and that you have enough statistical power to answer the questions you're interested in asking. These steps are all incredibly important, but beyond the scope of our course. For all of those steps (collecting specimens, extracting DNA, prepping your samples) you've likely kept a lab notebook that details how and why you did each step. However, the process of documentation doesn't stop at the sequencer!</p> <p>Genomics projects can quickly accumulate hundreds of files across tens of folders. Every computational analysis you perform over the course of your project is going to create many files, which can especially become a problem when you'll inevitably want to run some of those analyses again. For instance, you might have made significant headway into your project, but then have to remember the PCR conditions you used to create your sequencing library months prior.</p> <p>Other questions might arise along the way:</p> <ul> <li>What were your best alignment results?</li> <li>Which folder were they in: Analysis1, AnalysisRedone, or AnalysisRedone2?</li> <li>Which quality cutoff did you use?</li> <li>What version of a given program did you implement your analysis in?</li> </ul> <p>Good documentation is key to avoiding this issue, and luckily enough, recording your computational experiments is even easier than recording lab data. Copy/Paste will become your best friend, sensible file names will make your analysis understandable by you and your collaborators, and writing the methods section for your next paper will be easy! Remember that in any given project of yours, it's worthwhile to consider a future version of yourself as an entirely separate collaborator. The better your documenation is, the more this 'collaborator' will feel indebted to you!</p> <p>With this in mind, let's have a look at the best practices for documenting your genomics project. Your future self will thank you.</p> <p>In this exercise we will setup a file system for the project we will be working on during this workshop.</p> <p>We will start by creating a directory that we can use for the rest of the workshop. First navigate to your home directory. Then confirm that you are in the correct directory using the <code>pwd</code> command.</p> <p>code</p> <pre><code>$ cd\n$ pwd\n</code></pre> <p>You should see the output:</p> <pre><code>/home/training \n</code></pre> <p>If you aren't in your home directory, the easiest way to get there is to enter the command <code>cd</code>, which always returns you to home.</p> <p>Dumbbell</p> <p>Use the <code>mkdir</code> command to make the following directories:</p> <ul> <li><code>introshell</code></li> <li><code>introshell/docs</code></li> <li><code>introshell/data</code></li> <li><code>introshell/results</code></li> </ul> Solution <pre><code>$ mkdir introshell \n$ mkdir introshell/docs\n$ mkdir introshell/data\n$ mkdir introshell/results\n</code></pre> <p>Use <code>ls -R</code> to verify that you have created these directories. The <code>-R</code> option for <code>ls</code> stands for recursive. This option causes <code>ls</code> to return the contents of each subdirectory within the directory iteratively.</p> <p>code</p> <pre><code>$ ls -R introshell \n</code></pre> <p>You should see the following output:</p> <pre><code>introshell/:\ndata  docs  results\n\nintroshell/data:\n\nintroshell/docs:\n\nintroshell/results: \n</code></pre>"},{"location":"06-organization/#organizing-your-files","title":"Organizing your files","text":"<p>Before beginning any analysis, it's important to save a copy of your raw data. The raw data should never be changed. Regardless of how sure you are that you want to carry out a particular data cleaning step, there's always the chance that you'll change your mind later or that there will be an error in carrying out the data cleaning and you'll need to go back a step in the process. Having a raw copy of your data that you never modify guarantees that you will always be able to start over if something goes wrong with your analysis. When starting any analysis, you can make a copy of your raw data file and do your manipulations on that file, rather than the raw version. We learned in a previous episode how to prevent overwriting our raw data files by setting restrictive file permissions.</p> <p>You can store any results that are generated from your analysis in the <code>results</code> folder. This guarantees that you won't confuse results file and data files in six months or two years when you are looking back through your files in preparation for publishing your study.</p> <p>The <code>docs</code> folder is the place to store any written analysis of your results, notes about how your analyses were carried out, and documents related to your eventual publication.</p>"},{"location":"06-organization/#documenting-your-activity-on-the-project","title":"Documenting your activity on the project","text":"<p>When carrying out wet-lab analyses, most scientists work from a written protocol and keep a hard copy of written notes in their lab notebook, including any things they did differently from the written protocol. This detailed record-keeping process is just as important when doing computational analyses. Luckily, it's even easier to record the steps you've carried out computational than it is when working at the bench.</p> <p>The <code>history</code> command is a convenient way to document all the commands you have used while analyzing and manipulating your project files. Let's document the work we have done on our project so far.</p> <p>View the commands that you have used so far during this session using <code>history</code>:</p> <pre><code>$ history\n</code></pre> <p>The history likely contains many more commands than you have used for the current project. Let's view the last several commands that focus on just what we need for this project.</p> <p>View the last n lines of your history (where n = approximately the last few lines you think relevant). For our example, we will use the last 7:</p> <pre><code>$ history | tail -n 7\n</code></pre> <p>Exercise</p> <p>Using your knowledge of the shell, use the append redirect <code>&gt;&gt;</code> to create a file called <code>introshell_log_XXXX_XX_XX.sh</code> (Use the four-digit year, two-digit month, and two digit day, e.g. <code>introshell_log_2017_10_27.sh</code>)</p> Solution <pre><code>$ history | tail -n 7 &gt;&gt; introshell_log_2017_10_27.sh\n</code></pre> <p>Note we used the last 7 lines as an example, the number of lines may vary.</p> <p>You may have noticed that your history contains the <code>history</code> command itself. To remove this redundancy from our log, let's use the <code>nano</code> text editor to fix the file:</p> <pre><code>$ nano introshell_log_2017_10_27.sh\n</code></pre> <p>(Remember to replace the <code>2017_10_27</code> with your workshop date.)</p> <p>From the <code>nano</code> screen, you can use your cursor to navigate, type, and delete any redundant lines.</p>"},{"location":"06-organization/#navigating-in-nano","title":"Navigating in Nano","text":"<p>Although <code>nano</code> is useful, it can be frustrating to edit documents, as you can't use your mouse to navigate to the part of the document you would like to edit. Here are some useful keyboard shortcuts for moving around within a text document in <code>nano</code>. You can find more information by typing Ctrl-G within <code>nano</code>.</p> key action Ctrl-Space OR Ctrl-\u2192 to move forward one word Alt-Space OR Esc-Space OR Ctrl-\u2190 to move back one word Ctrl-A to move to the beginning of the current line Ctrl-E to move to the end of the current line Ctrl-W to search <p>Add a date line and comment to the line where you have created the directory. Recall that any text on a line after a <code>#</code> is ignored by bash when evaluating the text as code. For example:</p> <pre><code># 2017_10_27   \n# Created sample directories for the Data Carpentry workshop  \n</code></pre> <ul> <li>Next, remove any lines of the history that are not relevant by navigating to those lines and using your</li> <li>delete key. Save your file and close <code>nano</code>.</li> </ul> <p>Your file should look something like this:</p> <pre><code># 2017_10_27\n# Created sample directories for the Data Carpentry workshop\n\nmkdirintroshell \nmkdir introshell/docs\nmkdir introshell/data\nmkdir introshell/results\n</code></pre> <p>If you keep this file up to date, you can use it to re-do your work on your project if something happens to your results files. To demonstrate how this works, first delete your <code>introshell</code> directory and all of its subdirectories. Look at your directory cont</p> <p>code</p> <pre><code>$ rm -rintroshell \n$ ls\n</code></pre> <pre><code>shell_data  introshell_log_2017_10_27.sh\n</code></pre> <p>Then run your workshop log file as a bash script. You should see the <code>introshell</code> directory and all of its subdirectories reappear.</p> <pre><code>$ bash introshell_log_2017_10_27.sh\n$ ls\n</code></pre> <pre><code>shell_data  introshell introshell_log_2017_10_27.sh\n</code></pre> <p>It's important that we keep our workshop log file outside of our <code>introshell</code> directory if we want to use it to recreate our work. It's also important for us to keep it up to date by regularly updating with the commands that we used to generate our results files.</p> <p>Congratulations! You've finished your introduction to using the shell for genomics projects. You now know how to navigate your file system, create, copy, move, and remove files and directories, and automate repetitive tasks using scripts and wildcards. With this solid foundation, you're ready to move on to apply all of these new skills to carrying out more sophisticated bioinformatics analysis work. Don't worry if everything doesn't feel perfectly comfortable yet. We're going to have many more opportunities for practice as we move forward on our bioinformatics journey!</p>"},{"location":"06-organization/#references","title":"References","text":"<p>A Quick Guide to Organizing Computational Biology Projects</p> <p>keypoints</p> <ul> <li>Spend the time to organize your file system when you start a new project. Your future self will thank you!</li> <li>Always save a write-protected copy of your raw data.</li> </ul>"},{"location":"Supplementary/1-supplementary/","title":"1. Supplementary - File manipulation","text":""},{"location":"Supplementary/1-supplementary/#file-manipulation-and-more-practice-with-pipes","title":"File manipulation and more practice with pipes","text":"<p>Let's use the tools we've added to our tool kit so far, along with a few new ones, to example our SRA metadata file. First, let's navigate to the correct directory.</p> <pre><code>$ cd\n$ cd ~/shell_data/sra_metadata\n</code></pre> <p>This file contains a lot of information about the samples that we submitted for sequencing. We took a look at this file in an earlier lesson. Here we're going to use the information in this file to answer some questions about our samples.</p>"},{"location":"Supplementary/1-supplementary/#how-many-of-the-read-libraries-are-paired-end","title":"How many of the read libraries are paired end?","text":"<p>The samples that we submitted to the sequencing facility were a mix of single and paired end libraries. We know that we recorded information in our metadata table about which samples used which library preparation method, but we don't remember exactly where this data is recorded. Let's start by looking at our column headers to see which column might have this information. Our column headers are in the first row of our data table, so we can use <code>head</code> with a <code>-n</code> flag to look at just the first row of the file.</p> <pre><code>$ head -n 1 SraRunTable.txt\n</code></pre> <pre><code>BioSample_s InsertSize_l    LibraryLayout_s Library_Name_s  LoadDate_s  MBases_l    MBytes_l    ReleaseDate_s Run_s SRA_Sample_s Sample_Name_s Assay_Type_s AssemblyName_s BioProject_s Center_Name_s Consent_s Organism_Platform_s SRA_Study_s g1k_analysis_group_s g1k_pop_code_s source_s strain_s\n</code></pre> <p>That is only the first line of our file, but because there are a lot of columns, the output likely wraps around your terminal window and appears as multiple lines. Once we figure out which column our data is in, we can use a command called <code>cut</code> to extract the column of interest.</p> <p>Because this is pretty hard to read, we can look at just a few column header names at a time by combining the <code>|</code> redirect and <code>cut</code>.</p> <pre><code>$ head -n 1 SraRunTable.txt | cut -f1-4\n</code></pre> <p><code>cut</code> takes a <code>-f</code> flag, which stands for \"field\". This flag accepts a list of field numbers, in our case, column numbers. Here we are extracting the first four column names.</p> <pre><code>BioSample_s InsertSize_l      LibraryLayout_s   Library_Name_s    \n</code></pre> <p>The LibraryLayout_s column looks like it should have the information we want.  Let's look at some of the data from that column. We can use <code>cut</code> to extract only the 3<sup>rd</sup> column from the file and then use the <code>|</code> operator with <code>head</code> to look at just the first few lines of data in that column.</p> <pre><code>$ cut -f3 SraRunTable.txt | head -n 10\n</code></pre> <pre><code>LibraryLayout_s\nSINGLE\nSINGLE\nSINGLE\nSINGLE\nSINGLE\nSINGLE\nSINGLE\nSINGLE\nPAIRED\n</code></pre> <p>We can see that there are (at least) two categories, SINGLE and PAIRED.  We want to search all entries in this column for just PAIRED and count the number of matches. For this, we will use the <code>|</code> operator twice to combine <code>cut</code> (to extract the column we want), <code>grep</code> (to find matches) and <code>wc</code> (to count matches).</p> <pre><code>$ cut -f3 SraRunTable.txt | grep PAIRED | wc -l\n</code></pre> <pre><code>2\n</code></pre> <p>We can see from this that we have only two paired-end libraries in the samples we submitted for sequencing.</p> <p>:::::::::::::::::::::::::::::::::::::::  challenge</p>"},{"location":"Supplementary/1-supplementary/#exercise","title":"Exercise","text":"<p>How many single-end libraries are in our samples?</p> <p>:::::::::::::::  solution</p>"},{"location":"Supplementary/1-supplementary/#solution","title":"Solution","text":"<pre><code>$ cut -f3 SraRunTable.txt | grep SINGLE | wc -l\n</code></pre> <pre><code>35\n</code></pre>"},{"location":"Supplementary/1-supplementary/#how-many-of-each-class-of-library-layout-are-there","title":"How many of each class of library layout are there?","text":"<p>We can extract even more information from our metadata table if we add in some new tools: <code>sort</code> and <code>uniq</code>. The <code>sort</code> command will sort the lines of a text file and the <code>uniq</code> command will filter out repeated neighboring lines in a file. You might expect <code>uniq</code> to extract all of the unique lines in a file. This isn't what it does, however, for reasons involving computer memory and speed. If we want to extract all unique lines, we can do so by combining <code>uniq</code> with <code>sort</code>. We'll see how to do this soon.</p> <p>For example, if we want to know how many samples of each library type are recorded in our table, we can extract the third column (with <code>cut</code>), and pipe that output into <code>sort</code>.</p> <pre><code>$ cut -f3 SraRunTable.txt | sort\n</code></pre> <p>If you look closely, you might see that we have one line that reads \"LibraryLayout_s\". This is the header of our column. We can discard this information using the <code>-v</code> flag in <code>grep</code>, which means return all the lines that do not match the search pattern.</p> <pre><code>$ cut -f3 SraRunTable.txt | grep -v LibraryLayout_s | sort\n</code></pre> <p>This command returns a sorted list (too long to show here) of PAIRED and SINGLE values. We can use the <code>uniq</code> command to see a list of all the different categories that are present. If we do this, we see that the only two types of libraries we have present are labelled PAIRED and SINGLE. There aren't any other types in our file.</p> <pre><code>$ cut -f3 SraRunTable.txt | grep -v LibraryLayout_s | sort | uniq\n</code></pre> <pre><code>PAIRED\nSINGLE\n</code></pre> <p>If we want to count how many of each we have, we can use the <code>-c</code> (count) flag for <code>uniq</code>.</p> <pre><code>$ cut -f3 SraRunTable.txt | grep -v LibraryLayout_s | sort | uniq -c\n</code></pre> <pre><code>2 PAIRED\n35 SINGLE\n</code></pre> <p>Exercise</p> <ol> <li>How many different sample load dates are there?</li> <li>How many samples were loaded on each date?</li> </ol> Solution <ol> <li>There are two different sample load dates.</li> </ol> <pre><code>cut -f5 SraRunTable.txt | grep -v LoadDate_s | sort | uniq\n</code></pre> <pre><code>25-Jul-12\n29-May-14\n</code></pre> <ol> <li>Six samples were loaded on one date and 31 were loaded on the other.</li> </ol> <pre><code>cut -f5 SraRunTable.txt | grep -v LoadDate_s | sort | uniq -c\n</code></pre> <pre><code> 6 25-Jul-12\n31 29-May-14\n</code></pre>"},{"location":"Supplementary/1-supplementary/#can-we-sort-the-file-by-library-layout-and-save-that-sorted-information-to-a-new-file","title":"Can we sort the file by library layout and save that sorted information to a new file?","text":"<p>We might want to re-order our entire metadata table so that all of the paired-end samples appear together and all of the single-end samples appear together. We can use the <code>-k</code> (key) flag for <code>sort</code> to sort based on a particular column. This is similar to the <code>-f</code> flag for <code>cut</code>.</p> <p>Let's sort based on the third column (<code>-k3</code>) and redirect our output to a new file.</p> <pre><code>$ sort -k3 SraRunTable.txt &gt; SraRunTable_sorted_by_layout.txt\n</code></pre>"},{"location":"Supplementary/1-supplementary/#can-we-extract-only-paired-end-records-into-a-new-file","title":"Can we extract only paired-end records into a new file?","text":"<p>We also might want to extract the information for all samples that meet a specific criterion (for example, are paired-end) and put those lines of our table in a new file. First, we need to check to make sure that the pattern we're searching for (\"PAIRED\") only appears in the column where we expect it to occur (column 3). We know from earlier that there are only two paired-end samples in the file, so we can <code>grep</code> for \"PAIRED\" and see how many results we get.</p> <pre><code>$ grep PAIRED SraRunTable.txt | wc -l\n</code></pre> <pre><code>2\n</code></pre> <p>There are only two results, so we can use \"PAIRED\" as our search term to extract the paired-end samples to a new file.</p> <pre><code>$ grep PAIRED SraRunTable.txt &gt; SraRunTable_only_paired_end.txt\n</code></pre>"},{"location":"Supplementary/1-supplementary/#exercise_1","title":"Exercise","text":"<p>Sort samples by load date and export each of those sets to a new file (one new file per unique load date).</p>"},{"location":"Supplementary/1-supplementary/#solution_1","title":"Solution","text":"<pre><code>$ grep 25-Jul-12 SraRunTable.txt &gt; SraRunTable_25-Jul-12.txt\n$ grep 29-May-14 SraRunTable.txt &gt; SraRunTable_29-May-14.txt\n</code></pre>"},{"location":"Supplementary/1-supplementary/#making-code-more-customizeable-using-command-line-arguments","title":"Making code more customizeable using command line arguments","text":"<p>In Lesson 05 (Writing Scripts) we used the <code>grep</code> command line tool to look for FASTQ records with lots of Ns from all the .fastq files in our current folder using the following code:</p> <pre><code>$ grep -B1 -A2 -h NNNNNNNNNN *.fastq | grep -v '^--' &gt; scripted_bad_reads.txt\n</code></pre> <p>This is very useful, but could be more customizeable. We may want to be able to run this command over and over again without needing to copy and paste it and allow the user to specify exactly which file they want to examine for bad reads.</p> <p>We can accomplish these goals by including the above command in a script that takes in user input via a command line argument. We can slightly modify our <code>bad-reads-script.sh</code> file to do so. Use <code>c</code> to copy your <code>bad-reads-script.sh</code> into a new script called <code>custom-bad-reads-script.sh</code>. Make the following modifications to <code>custom-bad-reads-script.sh</code>:</p> <pre><code>filename=$1\ngrep -B1 -A2 -h NNNNNNNNNN $filename | grep -v '^--' &gt; scripted_bad_reads.txt\n</code></pre> <p><code>$1</code> is our command line argument. The line <code>filename=$1</code> tells Bash to take the first thing you type after the name of the script itself and assign that value to a variable called filename.</p> <p>For example, this script can be run in the following way to output the bad reads just from one file:</p> <pre><code>bash custom-bad-reads-script.sh SRR098026.fastq\n</code></pre> <p>We can then take a look at what the output file currently contains using <code>head scripted_bad_reads.txt</code>:</p> <pre><code>@SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35\nNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNN\n+SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35\n!!!!!!!!!!!!!!!!#!!!!!!!!!!!!!!!!!!\n@SRR098026.2 HWUSI-EAS1599_1:2:1:0:312 length=35\nNNNNNNNNNNNNNNNNANNNNNNNNNNNNNNNNNN\n+SRR098026.2 HWUSI-EAS1599_1:2:1:0:312 length=35\n!!!!!!!!!!!!!!!!#!!!!!!!!!!!!!!!!!!\n@SRR098026.3 HWUSI-EAS1599_1:2:1:0:570 length=35\nNNNNNNNNNNNNNNNNANNNNNNNNNNNNNNNNNN\n</code></pre> <p>This should be same output as using our original code and manually modifying the original standalone code on the command line to \"SRR098026.fastq\" on the command line, which should give us the same output as above:</p> <pre><code>$ grep -B1 -A2 -h NNNNNNNNNN SRR098026.fastq | grep -v '^--' &gt; scripted_bad_reads.txt\nhead scripted_bad_reads.txt\n</code></pre> <pre><code>@SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35\nNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNN\n+SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35\n!!!!!!!!!!!!!!!!#!!!!!!!!!!!!!!!!!!\n@SRR098026.2 HWUSI-EAS1599_1:2:1:0:312 length=35\nNNNNNNNNNNNNNNNNANNNNNNNNNNNNNNNNNN\n+SRR098026.2 HWUSI-EAS1599_1:2:1:0:312 length=35\n!!!!!!!!!!!!!!!!#!!!!!!!!!!!!!!!!!!\n@SRR098026.3 HWUSI-EAS1599_1:2:1:0:570 length=35\nNNNNNNNNNNNNNNNNANNNNNNNNNNNNNNNNNN\n</code></pre>"}]}